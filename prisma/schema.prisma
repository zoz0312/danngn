// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider              = "prisma-client-js"
  // previewFeatures       = ["referentialIntegrity"]
}

generator typegraphql {
  provider            = "typegraphql-prisma"
  // previewFeatures     = ["referentialIntegrity"]
  output              = "../prisma/generated/type-graphql"
  emitTranspiledCode  = true
  // emitOnly = "models"
}

datasource db {
  provider              = "mysql"
  url                   = env("DATABASE_URL")
  // referentialIntegrity  = "prisma"
}

// TODO: 읍면동 정보 추가

enum role {
  USER
  ADMIN
  SUPER_ADMIN
}

model user {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  deleted       DateTime?
  phone         Int?      @unique
  email         String    @unique
  name          String
  password      String    @default("")
  role          role      @default(USER)
  tradePosts    tradePost[]
  tradeInterest tradeInterest[]

  @@index([id])
}

enum salesType {
  SALE      // 판매중
  RESERVED  // 예약중
  SOLD_OUT  // 판매완료
}

model tradeCategory {
  id            Int           @id @default(autoincrement())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  deleted       DateTime?
  name          String
  imageSrc      String
  tradePost     tradePost[]

  @@index([id])
}

model tradePost {
  id            Int           @id @default(autoincrement())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  deleted       DateTime?
  title         String
  content       String        @db.Text
  price         Int
  salesType     salesType     @default(SALE)
  hitCount      Int           @db.UnsignedInt @default(0)
  isHide        Boolean       @default(false)
  isPriceOffer  Boolean       @default(false)
  user          user          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  category      tradeCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId    Int
  tradeInterest tradeInterest[]
  // TODO: 읍면동 정보
  // TODO: 이미지

  @@index([id])
}

model tradeInterest {
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
  deleted       DateTime?
  tradePost     tradePost   @relation(fields: [tradePostId], references: [id], onDelete: Cascade)
  tradePostId   Int
  user          user        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int

  @@id([tradePostId, userId])
  @@index([tradePostId, userId])
}
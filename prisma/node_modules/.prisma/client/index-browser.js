
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.11.0
 * Query Engine version: b371888aaf8f51357c7457d836b86d12da91658b
 */
Prisma.prismaVersion = {
  client: "3.11.0",
  engine: "b371888aaf8f51357c7457d836b86d12da91658b"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deleted: 'deleted',
  phone: 'phone',
  email: 'email',
  name: 'name',
  password: 'password',
  role: 'role'
});

exports.Prisma.LsmdAdmSectUmdScalarFieldEnum = makeEnum({
  id: 'id',
  emdCd: 'emdCd',
  emdNm: 'emdNm',
  ssgOid: 'ssgOid',
  colAdmSe: 'colAdmSe',
  gid: 'gid'
});

exports.Prisma.TradeCategoryScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deleted: 'deleted',
  name: 'name',
  imageSrc: 'imageSrc'
});

exports.Prisma.TradePostScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deleted: 'deleted',
  title: 'title',
  content: 'content',
  price: 'price',
  salesType: 'salesType',
  hitCount: 'hitCount',
  isHide: 'isHide',
  isPriceOffer: 'isPriceOffer',
  userId: 'userId',
  categoryId: 'categoryId',
  lsmdAdmSectUmdId: 'lsmdAdmSectUmdId'
});

exports.Prisma.TradeInterestScalarFieldEnum = makeEnum({
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deleted: 'deleted',
  tradePostId: 'tradePostId',
  userId: 'userId'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});
exports.role = makeEnum({
  USER: 'USER',
  ADMIN: 'ADMIN',
  SUPER_ADMIN: 'SUPER_ADMIN'
});

exports.salesType = makeEnum({
  SALE: 'SALE',
  RESERVED: 'RESERVED',
  SOLD_OUT: 'SOLD_OUT'
});

exports.Prisma.ModelName = makeEnum({
  user: 'user',
  lsmdAdmSectUmd: 'lsmdAdmSectUmd',
  tradeCategory: 'tradeCategory',
  tradePost: 'tradePost',
  tradeInterest: 'tradeInterest'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)

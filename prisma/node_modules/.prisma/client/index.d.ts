
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model user
 * 
 */
export type user = {
  id: number
  createdAt: Date
  updatedAt: Date
  deleted: Date | null
  phone: number | null
  email: string
  name: string
  password: string
  role: role
}

/**
 * Model lsmdAdmSectUmd
 * 
 */
export type lsmdAdmSectUmd = {
  id: number
  emdCd: string
  emdNm: string
  ssgOid: number
  colAdmSe: string
  gid: number
}

/**
 * Model tradeCategory
 * 
 */
export type tradeCategory = {
  id: number
  createdAt: Date
  updatedAt: Date
  deleted: Date | null
  name: string
  imageSrc: string
}

/**
 * Model tradePost
 * 
 */
export type tradePost = {
  id: number
  createdAt: Date
  updatedAt: Date
  deleted: Date | null
  title: string
  content: string
  price: number
  salesType: salesType
  hitCount: number
  isHide: boolean
  isPriceOffer: boolean
  userId: number
  categoryId: number
  lsmdAdmSectUmdId: string
}

/**
 * Model tradeInterest
 * 
 */
export type tradeInterest = {
  createdAt: Date
  updatedAt: Date
  deleted: Date | null
  tradePostId: number
  userId: number
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const role: {
  USER: 'USER',
  ADMIN: 'ADMIN',
  SUPER_ADMIN: 'SUPER_ADMIN'
};

export type role = (typeof role)[keyof typeof role]


export const salesType: {
  SALE: 'SALE',
  RESERVED: 'RESERVED',
  SOLD_OUT: 'SOLD_OUT'
};

export type salesType = (typeof salesType)[keyof typeof salesType]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<GlobalReject>;

  /**
   * `prisma.lsmdAdmSectUmd`: Exposes CRUD operations for the **lsmdAdmSectUmd** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LsmdAdmSectUmds
    * const lsmdAdmSectUmds = await prisma.lsmdAdmSectUmd.findMany()
    * ```
    */
  get lsmdAdmSectUmd(): Prisma.lsmdAdmSectUmdDelegate<GlobalReject>;

  /**
   * `prisma.tradeCategory`: Exposes CRUD operations for the **tradeCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TradeCategories
    * const tradeCategories = await prisma.tradeCategory.findMany()
    * ```
    */
  get tradeCategory(): Prisma.tradeCategoryDelegate<GlobalReject>;

  /**
   * `prisma.tradePost`: Exposes CRUD operations for the **tradePost** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TradePosts
    * const tradePosts = await prisma.tradePost.findMany()
    * ```
    */
  get tradePost(): Prisma.tradePostDelegate<GlobalReject>;

  /**
   * `prisma.tradeInterest`: Exposes CRUD operations for the **tradeInterest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TradeInterests
    * const tradeInterests = await prisma.tradeInterest.findMany()
    * ```
    */
  get tradeInterest(): Prisma.tradeInterestDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.11.0
   * Query Engine version: b371888aaf8f51357c7457d836b86d12da91658b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    user: 'user',
    lsmdAdmSectUmd: 'lsmdAdmSectUmd',
    tradeCategory: 'tradeCategory',
    tradePost: 'tradePost',
    tradeInterest: 'tradeInterest'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    tradePosts: number
    tradeInterest: number
  }

  export type UserCountOutputTypeSelect = {
    tradePosts?: boolean
    tradeInterest?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type LsmdAdmSectUmdCountOutputType
   */


  export type LsmdAdmSectUmdCountOutputType = {
    tradePost: number
  }

  export type LsmdAdmSectUmdCountOutputTypeSelect = {
    tradePost?: boolean
  }

  export type LsmdAdmSectUmdCountOutputTypeGetPayload<
    S extends boolean | null | undefined | LsmdAdmSectUmdCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? LsmdAdmSectUmdCountOutputType
    : S extends undefined
    ? never
    : S extends LsmdAdmSectUmdCountOutputTypeArgs
    ?'include' extends U
    ? LsmdAdmSectUmdCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof LsmdAdmSectUmdCountOutputType ? LsmdAdmSectUmdCountOutputType[P] : never
  } 
    : LsmdAdmSectUmdCountOutputType
  : LsmdAdmSectUmdCountOutputType




  // Custom InputTypes

  /**
   * LsmdAdmSectUmdCountOutputType without action
   */
  export type LsmdAdmSectUmdCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the LsmdAdmSectUmdCountOutputType
     * 
    **/
    select?: LsmdAdmSectUmdCountOutputTypeSelect | null
  }



  /**
   * Count Type TradeCategoryCountOutputType
   */


  export type TradeCategoryCountOutputType = {
    tradePost: number
  }

  export type TradeCategoryCountOutputTypeSelect = {
    tradePost?: boolean
  }

  export type TradeCategoryCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TradeCategoryCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TradeCategoryCountOutputType
    : S extends undefined
    ? never
    : S extends TradeCategoryCountOutputTypeArgs
    ?'include' extends U
    ? TradeCategoryCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TradeCategoryCountOutputType ? TradeCategoryCountOutputType[P] : never
  } 
    : TradeCategoryCountOutputType
  : TradeCategoryCountOutputType




  // Custom InputTypes

  /**
   * TradeCategoryCountOutputType without action
   */
  export type TradeCategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TradeCategoryCountOutputType
     * 
    **/
    select?: TradeCategoryCountOutputTypeSelect | null
  }



  /**
   * Count Type TradePostCountOutputType
   */


  export type TradePostCountOutputType = {
    tradeInterest: number
  }

  export type TradePostCountOutputTypeSelect = {
    tradeInterest?: boolean
  }

  export type TradePostCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TradePostCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TradePostCountOutputType
    : S extends undefined
    ? never
    : S extends TradePostCountOutputTypeArgs
    ?'include' extends U
    ? TradePostCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TradePostCountOutputType ? TradePostCountOutputType[P] : never
  } 
    : TradePostCountOutputType
  : TradePostCountOutputType




  // Custom InputTypes

  /**
   * TradePostCountOutputType without action
   */
  export type TradePostCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TradePostCountOutputType
     * 
    **/
    select?: TradePostCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model user
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    phone: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    phone: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deleted: Date | null
    phone: number | null
    email: string | null
    name: string | null
    password: string | null
    role: role | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deleted: Date | null
    phone: number | null
    email: string | null
    name: string | null
    password: string | null
    role: role | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    deleted: number
    phone: number
    email: number
    name: number
    password: number
    role: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    phone?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    phone?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    phone?: true
    email?: true
    name?: true
    password?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    phone?: true
    email?: true
    name?: true
    password?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    phone?: true
    email?: true
    name?: true
    password?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which user to aggregate.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: userWhereInput
    orderBy?: Enumerable<userOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    deleted: Date | null
    phone: number | null
    email: string
    name: string
    password: string
    role: role
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deleted?: boolean
    phone?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    tradePosts?: boolean | tradePostFindManyArgs
    tradeInterest?: boolean | tradeInterestFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type userInclude = {
    tradePosts?: boolean | tradePostFindManyArgs
    tradeInterest?: boolean | tradeInterestFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type userGetPayload<
    S extends boolean | null | undefined | userArgs,
    U = keyof S
      > = S extends true
        ? user
    : S extends undefined
    ? never
    : S extends userArgs | userFindManyArgs
    ?'include' extends U
    ? user  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tradePosts' ? Array < tradePostGetPayload<S['include'][P]>>  :
        P extends 'tradeInterest' ? Array < tradeInterestGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tradePosts' ? Array < tradePostGetPayload<S['select'][P]>>  :
        P extends 'tradeInterest' ? Array < tradeInterestGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof user ? user[P] : never
  } 
    : user
  : user


  type userCountArgs = Merge<
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface userDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userFindManyArgs>(
      args?: SelectSubset<T, userFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user>>, PrismaPromise<Array<userGetPayload<T>>>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs>(
      args: SelectSubset<T, userCreateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs>(
      args?: SelectSubset<T, userCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs>(
      args: SelectSubset<T, userDeleteArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs>(
      args: SelectSubset<T, userUpdateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs>(
      args?: SelectSubset<T, userDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs>(
      args: SelectSubset<T, userUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs>(
      args: SelectSubset<T, userUpsertArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tradePosts<T extends tradePostFindManyArgs = {}>(args?: Subset<T, tradePostFindManyArgs>): CheckSelect<T, PrismaPromise<Array<tradePost>>, PrismaPromise<Array<tradePostGetPayload<T>>>>;

    tradeInterest<T extends tradeInterestFindManyArgs = {}>(args?: Subset<T, tradeInterestFindManyArgs>): CheckSelect<T, PrismaPromise<Array<tradeInterest>>, PrismaPromise<Array<tradeInterestGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * user findUnique
   */
  export type userFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Throw an Error if a user can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user to fetch.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user findFirst
   */
  export type userFindFirstArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Throw an Error if a user can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user to fetch.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user findMany
   */
  export type userFindManyArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user create
   */
  export type userCreateArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * The data needed to create a user.
     * 
    **/
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user createMany
   */
  export type userCreateManyArgs = {
    /**
     * The data used to create many users.
     * 
    **/
    data: Enumerable<userCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user update
   */
  export type userUpdateArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * The data needed to update a user.
     * 
    **/
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs = {
    /**
     * The data used to update users.
     * 
    **/
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     * 
    **/
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * The filter to search for the user to update in case it exists.
     * 
    **/
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     * 
    **/
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Filter which user to delete.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs = {
    /**
     * Filter which users to delete
     * 
    **/
    where?: userWhereInput
  }


  /**
   * user without action
   */
  export type userArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
  }



  /**
   * Model lsmdAdmSectUmd
   */


  export type AggregateLsmdAdmSectUmd = {
    _count: LsmdAdmSectUmdCountAggregateOutputType | null
    _avg: LsmdAdmSectUmdAvgAggregateOutputType | null
    _sum: LsmdAdmSectUmdSumAggregateOutputType | null
    _min: LsmdAdmSectUmdMinAggregateOutputType | null
    _max: LsmdAdmSectUmdMaxAggregateOutputType | null
  }

  export type LsmdAdmSectUmdAvgAggregateOutputType = {
    id: number | null
    ssgOid: number | null
    gid: number | null
  }

  export type LsmdAdmSectUmdSumAggregateOutputType = {
    id: number | null
    ssgOid: number | null
    gid: number | null
  }

  export type LsmdAdmSectUmdMinAggregateOutputType = {
    id: number | null
    emdCd: string | null
    emdNm: string | null
    ssgOid: number | null
    colAdmSe: string | null
    gid: number | null
  }

  export type LsmdAdmSectUmdMaxAggregateOutputType = {
    id: number | null
    emdCd: string | null
    emdNm: string | null
    ssgOid: number | null
    colAdmSe: string | null
    gid: number | null
  }

  export type LsmdAdmSectUmdCountAggregateOutputType = {
    id: number
    emdCd: number
    emdNm: number
    ssgOid: number
    colAdmSe: number
    gid: number
    _all: number
  }


  export type LsmdAdmSectUmdAvgAggregateInputType = {
    id?: true
    ssgOid?: true
    gid?: true
  }

  export type LsmdAdmSectUmdSumAggregateInputType = {
    id?: true
    ssgOid?: true
    gid?: true
  }

  export type LsmdAdmSectUmdMinAggregateInputType = {
    id?: true
    emdCd?: true
    emdNm?: true
    ssgOid?: true
    colAdmSe?: true
    gid?: true
  }

  export type LsmdAdmSectUmdMaxAggregateInputType = {
    id?: true
    emdCd?: true
    emdNm?: true
    ssgOid?: true
    colAdmSe?: true
    gid?: true
  }

  export type LsmdAdmSectUmdCountAggregateInputType = {
    id?: true
    emdCd?: true
    emdNm?: true
    ssgOid?: true
    colAdmSe?: true
    gid?: true
    _all?: true
  }

  export type LsmdAdmSectUmdAggregateArgs = {
    /**
     * Filter which lsmdAdmSectUmd to aggregate.
     * 
    **/
    where?: lsmdAdmSectUmdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lsmdAdmSectUmds to fetch.
     * 
    **/
    orderBy?: Enumerable<lsmdAdmSectUmdOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: lsmdAdmSectUmdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lsmdAdmSectUmds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lsmdAdmSectUmds.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned lsmdAdmSectUmds
    **/
    _count?: true | LsmdAdmSectUmdCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LsmdAdmSectUmdAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LsmdAdmSectUmdSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LsmdAdmSectUmdMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LsmdAdmSectUmdMaxAggregateInputType
  }

  export type GetLsmdAdmSectUmdAggregateType<T extends LsmdAdmSectUmdAggregateArgs> = {
        [P in keyof T & keyof AggregateLsmdAdmSectUmd]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLsmdAdmSectUmd[P]>
      : GetScalarType<T[P], AggregateLsmdAdmSectUmd[P]>
  }




  export type LsmdAdmSectUmdGroupByArgs = {
    where?: lsmdAdmSectUmdWhereInput
    orderBy?: Enumerable<lsmdAdmSectUmdOrderByWithAggregationInput>
    by: Array<LsmdAdmSectUmdScalarFieldEnum>
    having?: lsmdAdmSectUmdScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LsmdAdmSectUmdCountAggregateInputType | true
    _avg?: LsmdAdmSectUmdAvgAggregateInputType
    _sum?: LsmdAdmSectUmdSumAggregateInputType
    _min?: LsmdAdmSectUmdMinAggregateInputType
    _max?: LsmdAdmSectUmdMaxAggregateInputType
  }


  export type LsmdAdmSectUmdGroupByOutputType = {
    id: number
    emdCd: string
    emdNm: string
    ssgOid: number
    colAdmSe: string
    gid: number
    _count: LsmdAdmSectUmdCountAggregateOutputType | null
    _avg: LsmdAdmSectUmdAvgAggregateOutputType | null
    _sum: LsmdAdmSectUmdSumAggregateOutputType | null
    _min: LsmdAdmSectUmdMinAggregateOutputType | null
    _max: LsmdAdmSectUmdMaxAggregateOutputType | null
  }

  type GetLsmdAdmSectUmdGroupByPayload<T extends LsmdAdmSectUmdGroupByArgs> = PrismaPromise<
    Array<
      PickArray<LsmdAdmSectUmdGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LsmdAdmSectUmdGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LsmdAdmSectUmdGroupByOutputType[P]>
            : GetScalarType<T[P], LsmdAdmSectUmdGroupByOutputType[P]>
        }
      >
    >


  export type lsmdAdmSectUmdSelect = {
    id?: boolean
    emdCd?: boolean
    emdNm?: boolean
    ssgOid?: boolean
    colAdmSe?: boolean
    gid?: boolean
    tradePost?: boolean | tradePostFindManyArgs
    _count?: boolean | LsmdAdmSectUmdCountOutputTypeArgs
  }

  export type lsmdAdmSectUmdInclude = {
    tradePost?: boolean | tradePostFindManyArgs
    _count?: boolean | LsmdAdmSectUmdCountOutputTypeArgs
  }

  export type lsmdAdmSectUmdGetPayload<
    S extends boolean | null | undefined | lsmdAdmSectUmdArgs,
    U = keyof S
      > = S extends true
        ? lsmdAdmSectUmd
    : S extends undefined
    ? never
    : S extends lsmdAdmSectUmdArgs | lsmdAdmSectUmdFindManyArgs
    ?'include' extends U
    ? lsmdAdmSectUmd  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tradePost' ? Array < tradePostGetPayload<S['include'][P]>>  :
        P extends '_count' ? LsmdAdmSectUmdCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tradePost' ? Array < tradePostGetPayload<S['select'][P]>>  :
        P extends '_count' ? LsmdAdmSectUmdCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof lsmdAdmSectUmd ? lsmdAdmSectUmd[P] : never
  } 
    : lsmdAdmSectUmd
  : lsmdAdmSectUmd


  type lsmdAdmSectUmdCountArgs = Merge<
    Omit<lsmdAdmSectUmdFindManyArgs, 'select' | 'include'> & {
      select?: LsmdAdmSectUmdCountAggregateInputType | true
    }
  >

  export interface lsmdAdmSectUmdDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one LsmdAdmSectUmd that matches the filter.
     * @param {lsmdAdmSectUmdFindUniqueArgs} args - Arguments to find a LsmdAdmSectUmd
     * @example
     * // Get one LsmdAdmSectUmd
     * const lsmdAdmSectUmd = await prisma.lsmdAdmSectUmd.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends lsmdAdmSectUmdFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, lsmdAdmSectUmdFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'lsmdAdmSectUmd'> extends True ? CheckSelect<T, Prisma__lsmdAdmSectUmdClient<lsmdAdmSectUmd>, Prisma__lsmdAdmSectUmdClient<lsmdAdmSectUmdGetPayload<T>>> : CheckSelect<T, Prisma__lsmdAdmSectUmdClient<lsmdAdmSectUmd | null >, Prisma__lsmdAdmSectUmdClient<lsmdAdmSectUmdGetPayload<T> | null >>

    /**
     * Find the first LsmdAdmSectUmd that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lsmdAdmSectUmdFindFirstArgs} args - Arguments to find a LsmdAdmSectUmd
     * @example
     * // Get one LsmdAdmSectUmd
     * const lsmdAdmSectUmd = await prisma.lsmdAdmSectUmd.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends lsmdAdmSectUmdFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, lsmdAdmSectUmdFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'lsmdAdmSectUmd'> extends True ? CheckSelect<T, Prisma__lsmdAdmSectUmdClient<lsmdAdmSectUmd>, Prisma__lsmdAdmSectUmdClient<lsmdAdmSectUmdGetPayload<T>>> : CheckSelect<T, Prisma__lsmdAdmSectUmdClient<lsmdAdmSectUmd | null >, Prisma__lsmdAdmSectUmdClient<lsmdAdmSectUmdGetPayload<T> | null >>

    /**
     * Find zero or more LsmdAdmSectUmds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lsmdAdmSectUmdFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LsmdAdmSectUmds
     * const lsmdAdmSectUmds = await prisma.lsmdAdmSectUmd.findMany()
     * 
     * // Get first 10 LsmdAdmSectUmds
     * const lsmdAdmSectUmds = await prisma.lsmdAdmSectUmd.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lsmdAdmSectUmdWithIdOnly = await prisma.lsmdAdmSectUmd.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends lsmdAdmSectUmdFindManyArgs>(
      args?: SelectSubset<T, lsmdAdmSectUmdFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<lsmdAdmSectUmd>>, PrismaPromise<Array<lsmdAdmSectUmdGetPayload<T>>>>

    /**
     * Create a LsmdAdmSectUmd.
     * @param {lsmdAdmSectUmdCreateArgs} args - Arguments to create a LsmdAdmSectUmd.
     * @example
     * // Create one LsmdAdmSectUmd
     * const LsmdAdmSectUmd = await prisma.lsmdAdmSectUmd.create({
     *   data: {
     *     // ... data to create a LsmdAdmSectUmd
     *   }
     * })
     * 
    **/
    create<T extends lsmdAdmSectUmdCreateArgs>(
      args: SelectSubset<T, lsmdAdmSectUmdCreateArgs>
    ): CheckSelect<T, Prisma__lsmdAdmSectUmdClient<lsmdAdmSectUmd>, Prisma__lsmdAdmSectUmdClient<lsmdAdmSectUmdGetPayload<T>>>

    /**
     * Create many LsmdAdmSectUmds.
     *     @param {lsmdAdmSectUmdCreateManyArgs} args - Arguments to create many LsmdAdmSectUmds.
     *     @example
     *     // Create many LsmdAdmSectUmds
     *     const lsmdAdmSectUmd = await prisma.lsmdAdmSectUmd.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends lsmdAdmSectUmdCreateManyArgs>(
      args?: SelectSubset<T, lsmdAdmSectUmdCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a LsmdAdmSectUmd.
     * @param {lsmdAdmSectUmdDeleteArgs} args - Arguments to delete one LsmdAdmSectUmd.
     * @example
     * // Delete one LsmdAdmSectUmd
     * const LsmdAdmSectUmd = await prisma.lsmdAdmSectUmd.delete({
     *   where: {
     *     // ... filter to delete one LsmdAdmSectUmd
     *   }
     * })
     * 
    **/
    delete<T extends lsmdAdmSectUmdDeleteArgs>(
      args: SelectSubset<T, lsmdAdmSectUmdDeleteArgs>
    ): CheckSelect<T, Prisma__lsmdAdmSectUmdClient<lsmdAdmSectUmd>, Prisma__lsmdAdmSectUmdClient<lsmdAdmSectUmdGetPayload<T>>>

    /**
     * Update one LsmdAdmSectUmd.
     * @param {lsmdAdmSectUmdUpdateArgs} args - Arguments to update one LsmdAdmSectUmd.
     * @example
     * // Update one LsmdAdmSectUmd
     * const lsmdAdmSectUmd = await prisma.lsmdAdmSectUmd.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends lsmdAdmSectUmdUpdateArgs>(
      args: SelectSubset<T, lsmdAdmSectUmdUpdateArgs>
    ): CheckSelect<T, Prisma__lsmdAdmSectUmdClient<lsmdAdmSectUmd>, Prisma__lsmdAdmSectUmdClient<lsmdAdmSectUmdGetPayload<T>>>

    /**
     * Delete zero or more LsmdAdmSectUmds.
     * @param {lsmdAdmSectUmdDeleteManyArgs} args - Arguments to filter LsmdAdmSectUmds to delete.
     * @example
     * // Delete a few LsmdAdmSectUmds
     * const { count } = await prisma.lsmdAdmSectUmd.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends lsmdAdmSectUmdDeleteManyArgs>(
      args?: SelectSubset<T, lsmdAdmSectUmdDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more LsmdAdmSectUmds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lsmdAdmSectUmdUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LsmdAdmSectUmds
     * const lsmdAdmSectUmd = await prisma.lsmdAdmSectUmd.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends lsmdAdmSectUmdUpdateManyArgs>(
      args: SelectSubset<T, lsmdAdmSectUmdUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one LsmdAdmSectUmd.
     * @param {lsmdAdmSectUmdUpsertArgs} args - Arguments to update or create a LsmdAdmSectUmd.
     * @example
     * // Update or create a LsmdAdmSectUmd
     * const lsmdAdmSectUmd = await prisma.lsmdAdmSectUmd.upsert({
     *   create: {
     *     // ... data to create a LsmdAdmSectUmd
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LsmdAdmSectUmd we want to update
     *   }
     * })
    **/
    upsert<T extends lsmdAdmSectUmdUpsertArgs>(
      args: SelectSubset<T, lsmdAdmSectUmdUpsertArgs>
    ): CheckSelect<T, Prisma__lsmdAdmSectUmdClient<lsmdAdmSectUmd>, Prisma__lsmdAdmSectUmdClient<lsmdAdmSectUmdGetPayload<T>>>

    /**
     * Count the number of LsmdAdmSectUmds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lsmdAdmSectUmdCountArgs} args - Arguments to filter LsmdAdmSectUmds to count.
     * @example
     * // Count the number of LsmdAdmSectUmds
     * const count = await prisma.lsmdAdmSectUmd.count({
     *   where: {
     *     // ... the filter for the LsmdAdmSectUmds we want to count
     *   }
     * })
    **/
    count<T extends lsmdAdmSectUmdCountArgs>(
      args?: Subset<T, lsmdAdmSectUmdCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LsmdAdmSectUmdCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LsmdAdmSectUmd.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LsmdAdmSectUmdAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LsmdAdmSectUmdAggregateArgs>(args: Subset<T, LsmdAdmSectUmdAggregateArgs>): PrismaPromise<GetLsmdAdmSectUmdAggregateType<T>>

    /**
     * Group by LsmdAdmSectUmd.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LsmdAdmSectUmdGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LsmdAdmSectUmdGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LsmdAdmSectUmdGroupByArgs['orderBy'] }
        : { orderBy?: LsmdAdmSectUmdGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LsmdAdmSectUmdGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLsmdAdmSectUmdGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for lsmdAdmSectUmd.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__lsmdAdmSectUmdClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tradePost<T extends tradePostFindManyArgs = {}>(args?: Subset<T, tradePostFindManyArgs>): CheckSelect<T, PrismaPromise<Array<tradePost>>, PrismaPromise<Array<tradePostGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * lsmdAdmSectUmd findUnique
   */
  export type lsmdAdmSectUmdFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the lsmdAdmSectUmd
     * 
    **/
    select?: lsmdAdmSectUmdSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: lsmdAdmSectUmdInclude | null
    /**
     * Throw an Error if a lsmdAdmSectUmd can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which lsmdAdmSectUmd to fetch.
     * 
    **/
    where: lsmdAdmSectUmdWhereUniqueInput
  }


  /**
   * lsmdAdmSectUmd findFirst
   */
  export type lsmdAdmSectUmdFindFirstArgs = {
    /**
     * Select specific fields to fetch from the lsmdAdmSectUmd
     * 
    **/
    select?: lsmdAdmSectUmdSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: lsmdAdmSectUmdInclude | null
    /**
     * Throw an Error if a lsmdAdmSectUmd can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which lsmdAdmSectUmd to fetch.
     * 
    **/
    where?: lsmdAdmSectUmdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lsmdAdmSectUmds to fetch.
     * 
    **/
    orderBy?: Enumerable<lsmdAdmSectUmdOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lsmdAdmSectUmds.
     * 
    **/
    cursor?: lsmdAdmSectUmdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lsmdAdmSectUmds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lsmdAdmSectUmds.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lsmdAdmSectUmds.
     * 
    **/
    distinct?: Enumerable<LsmdAdmSectUmdScalarFieldEnum>
  }


  /**
   * lsmdAdmSectUmd findMany
   */
  export type lsmdAdmSectUmdFindManyArgs = {
    /**
     * Select specific fields to fetch from the lsmdAdmSectUmd
     * 
    **/
    select?: lsmdAdmSectUmdSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: lsmdAdmSectUmdInclude | null
    /**
     * Filter, which lsmdAdmSectUmds to fetch.
     * 
    **/
    where?: lsmdAdmSectUmdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lsmdAdmSectUmds to fetch.
     * 
    **/
    orderBy?: Enumerable<lsmdAdmSectUmdOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing lsmdAdmSectUmds.
     * 
    **/
    cursor?: lsmdAdmSectUmdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lsmdAdmSectUmds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lsmdAdmSectUmds.
     * 
    **/
    skip?: number
    distinct?: Enumerable<LsmdAdmSectUmdScalarFieldEnum>
  }


  /**
   * lsmdAdmSectUmd create
   */
  export type lsmdAdmSectUmdCreateArgs = {
    /**
     * Select specific fields to fetch from the lsmdAdmSectUmd
     * 
    **/
    select?: lsmdAdmSectUmdSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: lsmdAdmSectUmdInclude | null
    /**
     * The data needed to create a lsmdAdmSectUmd.
     * 
    **/
    data: XOR<lsmdAdmSectUmdCreateInput, lsmdAdmSectUmdUncheckedCreateInput>
  }


  /**
   * lsmdAdmSectUmd createMany
   */
  export type lsmdAdmSectUmdCreateManyArgs = {
    /**
     * The data used to create many lsmdAdmSectUmds.
     * 
    **/
    data: Enumerable<lsmdAdmSectUmdCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * lsmdAdmSectUmd update
   */
  export type lsmdAdmSectUmdUpdateArgs = {
    /**
     * Select specific fields to fetch from the lsmdAdmSectUmd
     * 
    **/
    select?: lsmdAdmSectUmdSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: lsmdAdmSectUmdInclude | null
    /**
     * The data needed to update a lsmdAdmSectUmd.
     * 
    **/
    data: XOR<lsmdAdmSectUmdUpdateInput, lsmdAdmSectUmdUncheckedUpdateInput>
    /**
     * Choose, which lsmdAdmSectUmd to update.
     * 
    **/
    where: lsmdAdmSectUmdWhereUniqueInput
  }


  /**
   * lsmdAdmSectUmd updateMany
   */
  export type lsmdAdmSectUmdUpdateManyArgs = {
    /**
     * The data used to update lsmdAdmSectUmds.
     * 
    **/
    data: XOR<lsmdAdmSectUmdUpdateManyMutationInput, lsmdAdmSectUmdUncheckedUpdateManyInput>
    /**
     * Filter which lsmdAdmSectUmds to update
     * 
    **/
    where?: lsmdAdmSectUmdWhereInput
  }


  /**
   * lsmdAdmSectUmd upsert
   */
  export type lsmdAdmSectUmdUpsertArgs = {
    /**
     * Select specific fields to fetch from the lsmdAdmSectUmd
     * 
    **/
    select?: lsmdAdmSectUmdSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: lsmdAdmSectUmdInclude | null
    /**
     * The filter to search for the lsmdAdmSectUmd to update in case it exists.
     * 
    **/
    where: lsmdAdmSectUmdWhereUniqueInput
    /**
     * In case the lsmdAdmSectUmd found by the `where` argument doesn't exist, create a new lsmdAdmSectUmd with this data.
     * 
    **/
    create: XOR<lsmdAdmSectUmdCreateInput, lsmdAdmSectUmdUncheckedCreateInput>
    /**
     * In case the lsmdAdmSectUmd was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<lsmdAdmSectUmdUpdateInput, lsmdAdmSectUmdUncheckedUpdateInput>
  }


  /**
   * lsmdAdmSectUmd delete
   */
  export type lsmdAdmSectUmdDeleteArgs = {
    /**
     * Select specific fields to fetch from the lsmdAdmSectUmd
     * 
    **/
    select?: lsmdAdmSectUmdSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: lsmdAdmSectUmdInclude | null
    /**
     * Filter which lsmdAdmSectUmd to delete.
     * 
    **/
    where: lsmdAdmSectUmdWhereUniqueInput
  }


  /**
   * lsmdAdmSectUmd deleteMany
   */
  export type lsmdAdmSectUmdDeleteManyArgs = {
    /**
     * Filter which lsmdAdmSectUmds to delete
     * 
    **/
    where?: lsmdAdmSectUmdWhereInput
  }


  /**
   * lsmdAdmSectUmd without action
   */
  export type lsmdAdmSectUmdArgs = {
    /**
     * Select specific fields to fetch from the lsmdAdmSectUmd
     * 
    **/
    select?: lsmdAdmSectUmdSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: lsmdAdmSectUmdInclude | null
  }



  /**
   * Model tradeCategory
   */


  export type AggregateTradeCategory = {
    _count: TradeCategoryCountAggregateOutputType | null
    _avg: TradeCategoryAvgAggregateOutputType | null
    _sum: TradeCategorySumAggregateOutputType | null
    _min: TradeCategoryMinAggregateOutputType | null
    _max: TradeCategoryMaxAggregateOutputType | null
  }

  export type TradeCategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type TradeCategorySumAggregateOutputType = {
    id: number | null
  }

  export type TradeCategoryMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deleted: Date | null
    name: string | null
    imageSrc: string | null
  }

  export type TradeCategoryMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deleted: Date | null
    name: string | null
    imageSrc: string | null
  }

  export type TradeCategoryCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    deleted: number
    name: number
    imageSrc: number
    _all: number
  }


  export type TradeCategoryAvgAggregateInputType = {
    id?: true
  }

  export type TradeCategorySumAggregateInputType = {
    id?: true
  }

  export type TradeCategoryMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    name?: true
    imageSrc?: true
  }

  export type TradeCategoryMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    name?: true
    imageSrc?: true
  }

  export type TradeCategoryCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    name?: true
    imageSrc?: true
    _all?: true
  }

  export type TradeCategoryAggregateArgs = {
    /**
     * Filter which tradeCategory to aggregate.
     * 
    **/
    where?: tradeCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tradeCategories to fetch.
     * 
    **/
    orderBy?: Enumerable<tradeCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: tradeCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tradeCategories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tradeCategories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tradeCategories
    **/
    _count?: true | TradeCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TradeCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TradeCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TradeCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TradeCategoryMaxAggregateInputType
  }

  export type GetTradeCategoryAggregateType<T extends TradeCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateTradeCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTradeCategory[P]>
      : GetScalarType<T[P], AggregateTradeCategory[P]>
  }




  export type TradeCategoryGroupByArgs = {
    where?: tradeCategoryWhereInput
    orderBy?: Enumerable<tradeCategoryOrderByWithAggregationInput>
    by: Array<TradeCategoryScalarFieldEnum>
    having?: tradeCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TradeCategoryCountAggregateInputType | true
    _avg?: TradeCategoryAvgAggregateInputType
    _sum?: TradeCategorySumAggregateInputType
    _min?: TradeCategoryMinAggregateInputType
    _max?: TradeCategoryMaxAggregateInputType
  }


  export type TradeCategoryGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    deleted: Date | null
    name: string
    imageSrc: string
    _count: TradeCategoryCountAggregateOutputType | null
    _avg: TradeCategoryAvgAggregateOutputType | null
    _sum: TradeCategorySumAggregateOutputType | null
    _min: TradeCategoryMinAggregateOutputType | null
    _max: TradeCategoryMaxAggregateOutputType | null
  }

  type GetTradeCategoryGroupByPayload<T extends TradeCategoryGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TradeCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TradeCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TradeCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], TradeCategoryGroupByOutputType[P]>
        }
      >
    >


  export type tradeCategorySelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deleted?: boolean
    name?: boolean
    imageSrc?: boolean
    tradePost?: boolean | tradePostFindManyArgs
    _count?: boolean | TradeCategoryCountOutputTypeArgs
  }

  export type tradeCategoryInclude = {
    tradePost?: boolean | tradePostFindManyArgs
    _count?: boolean | TradeCategoryCountOutputTypeArgs
  }

  export type tradeCategoryGetPayload<
    S extends boolean | null | undefined | tradeCategoryArgs,
    U = keyof S
      > = S extends true
        ? tradeCategory
    : S extends undefined
    ? never
    : S extends tradeCategoryArgs | tradeCategoryFindManyArgs
    ?'include' extends U
    ? tradeCategory  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tradePost' ? Array < tradePostGetPayload<S['include'][P]>>  :
        P extends '_count' ? TradeCategoryCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tradePost' ? Array < tradePostGetPayload<S['select'][P]>>  :
        P extends '_count' ? TradeCategoryCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof tradeCategory ? tradeCategory[P] : never
  } 
    : tradeCategory
  : tradeCategory


  type tradeCategoryCountArgs = Merge<
    Omit<tradeCategoryFindManyArgs, 'select' | 'include'> & {
      select?: TradeCategoryCountAggregateInputType | true
    }
  >

  export interface tradeCategoryDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one TradeCategory that matches the filter.
     * @param {tradeCategoryFindUniqueArgs} args - Arguments to find a TradeCategory
     * @example
     * // Get one TradeCategory
     * const tradeCategory = await prisma.tradeCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tradeCategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tradeCategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tradeCategory'> extends True ? CheckSelect<T, Prisma__tradeCategoryClient<tradeCategory>, Prisma__tradeCategoryClient<tradeCategoryGetPayload<T>>> : CheckSelect<T, Prisma__tradeCategoryClient<tradeCategory | null >, Prisma__tradeCategoryClient<tradeCategoryGetPayload<T> | null >>

    /**
     * Find the first TradeCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tradeCategoryFindFirstArgs} args - Arguments to find a TradeCategory
     * @example
     * // Get one TradeCategory
     * const tradeCategory = await prisma.tradeCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tradeCategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tradeCategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tradeCategory'> extends True ? CheckSelect<T, Prisma__tradeCategoryClient<tradeCategory>, Prisma__tradeCategoryClient<tradeCategoryGetPayload<T>>> : CheckSelect<T, Prisma__tradeCategoryClient<tradeCategory | null >, Prisma__tradeCategoryClient<tradeCategoryGetPayload<T> | null >>

    /**
     * Find zero or more TradeCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tradeCategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TradeCategories
     * const tradeCategories = await prisma.tradeCategory.findMany()
     * 
     * // Get first 10 TradeCategories
     * const tradeCategories = await prisma.tradeCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tradeCategoryWithIdOnly = await prisma.tradeCategory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends tradeCategoryFindManyArgs>(
      args?: SelectSubset<T, tradeCategoryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<tradeCategory>>, PrismaPromise<Array<tradeCategoryGetPayload<T>>>>

    /**
     * Create a TradeCategory.
     * @param {tradeCategoryCreateArgs} args - Arguments to create a TradeCategory.
     * @example
     * // Create one TradeCategory
     * const TradeCategory = await prisma.tradeCategory.create({
     *   data: {
     *     // ... data to create a TradeCategory
     *   }
     * })
     * 
    **/
    create<T extends tradeCategoryCreateArgs>(
      args: SelectSubset<T, tradeCategoryCreateArgs>
    ): CheckSelect<T, Prisma__tradeCategoryClient<tradeCategory>, Prisma__tradeCategoryClient<tradeCategoryGetPayload<T>>>

    /**
     * Create many TradeCategories.
     *     @param {tradeCategoryCreateManyArgs} args - Arguments to create many TradeCategories.
     *     @example
     *     // Create many TradeCategories
     *     const tradeCategory = await prisma.tradeCategory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tradeCategoryCreateManyArgs>(
      args?: SelectSubset<T, tradeCategoryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a TradeCategory.
     * @param {tradeCategoryDeleteArgs} args - Arguments to delete one TradeCategory.
     * @example
     * // Delete one TradeCategory
     * const TradeCategory = await prisma.tradeCategory.delete({
     *   where: {
     *     // ... filter to delete one TradeCategory
     *   }
     * })
     * 
    **/
    delete<T extends tradeCategoryDeleteArgs>(
      args: SelectSubset<T, tradeCategoryDeleteArgs>
    ): CheckSelect<T, Prisma__tradeCategoryClient<tradeCategory>, Prisma__tradeCategoryClient<tradeCategoryGetPayload<T>>>

    /**
     * Update one TradeCategory.
     * @param {tradeCategoryUpdateArgs} args - Arguments to update one TradeCategory.
     * @example
     * // Update one TradeCategory
     * const tradeCategory = await prisma.tradeCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tradeCategoryUpdateArgs>(
      args: SelectSubset<T, tradeCategoryUpdateArgs>
    ): CheckSelect<T, Prisma__tradeCategoryClient<tradeCategory>, Prisma__tradeCategoryClient<tradeCategoryGetPayload<T>>>

    /**
     * Delete zero or more TradeCategories.
     * @param {tradeCategoryDeleteManyArgs} args - Arguments to filter TradeCategories to delete.
     * @example
     * // Delete a few TradeCategories
     * const { count } = await prisma.tradeCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tradeCategoryDeleteManyArgs>(
      args?: SelectSubset<T, tradeCategoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more TradeCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tradeCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TradeCategories
     * const tradeCategory = await prisma.tradeCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tradeCategoryUpdateManyArgs>(
      args: SelectSubset<T, tradeCategoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one TradeCategory.
     * @param {tradeCategoryUpsertArgs} args - Arguments to update or create a TradeCategory.
     * @example
     * // Update or create a TradeCategory
     * const tradeCategory = await prisma.tradeCategory.upsert({
     *   create: {
     *     // ... data to create a TradeCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TradeCategory we want to update
     *   }
     * })
    **/
    upsert<T extends tradeCategoryUpsertArgs>(
      args: SelectSubset<T, tradeCategoryUpsertArgs>
    ): CheckSelect<T, Prisma__tradeCategoryClient<tradeCategory>, Prisma__tradeCategoryClient<tradeCategoryGetPayload<T>>>

    /**
     * Count the number of TradeCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tradeCategoryCountArgs} args - Arguments to filter TradeCategories to count.
     * @example
     * // Count the number of TradeCategories
     * const count = await prisma.tradeCategory.count({
     *   where: {
     *     // ... the filter for the TradeCategories we want to count
     *   }
     * })
    **/
    count<T extends tradeCategoryCountArgs>(
      args?: Subset<T, tradeCategoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TradeCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TradeCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TradeCategoryAggregateArgs>(args: Subset<T, TradeCategoryAggregateArgs>): PrismaPromise<GetTradeCategoryAggregateType<T>>

    /**
     * Group by TradeCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TradeCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TradeCategoryGroupByArgs['orderBy'] }
        : { orderBy?: TradeCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TradeCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTradeCategoryGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for tradeCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tradeCategoryClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tradePost<T extends tradePostFindManyArgs = {}>(args?: Subset<T, tradePostFindManyArgs>): CheckSelect<T, PrismaPromise<Array<tradePost>>, PrismaPromise<Array<tradePostGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * tradeCategory findUnique
   */
  export type tradeCategoryFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the tradeCategory
     * 
    **/
    select?: tradeCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tradeCategoryInclude | null
    /**
     * Throw an Error if a tradeCategory can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tradeCategory to fetch.
     * 
    **/
    where: tradeCategoryWhereUniqueInput
  }


  /**
   * tradeCategory findFirst
   */
  export type tradeCategoryFindFirstArgs = {
    /**
     * Select specific fields to fetch from the tradeCategory
     * 
    **/
    select?: tradeCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tradeCategoryInclude | null
    /**
     * Throw an Error if a tradeCategory can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tradeCategory to fetch.
     * 
    **/
    where?: tradeCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tradeCategories to fetch.
     * 
    **/
    orderBy?: Enumerable<tradeCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tradeCategories.
     * 
    **/
    cursor?: tradeCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tradeCategories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tradeCategories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tradeCategories.
     * 
    **/
    distinct?: Enumerable<TradeCategoryScalarFieldEnum>
  }


  /**
   * tradeCategory findMany
   */
  export type tradeCategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the tradeCategory
     * 
    **/
    select?: tradeCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tradeCategoryInclude | null
    /**
     * Filter, which tradeCategories to fetch.
     * 
    **/
    where?: tradeCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tradeCategories to fetch.
     * 
    **/
    orderBy?: Enumerable<tradeCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tradeCategories.
     * 
    **/
    cursor?: tradeCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tradeCategories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tradeCategories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TradeCategoryScalarFieldEnum>
  }


  /**
   * tradeCategory create
   */
  export type tradeCategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the tradeCategory
     * 
    **/
    select?: tradeCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tradeCategoryInclude | null
    /**
     * The data needed to create a tradeCategory.
     * 
    **/
    data: XOR<tradeCategoryCreateInput, tradeCategoryUncheckedCreateInput>
  }


  /**
   * tradeCategory createMany
   */
  export type tradeCategoryCreateManyArgs = {
    /**
     * The data used to create many tradeCategories.
     * 
    **/
    data: Enumerable<tradeCategoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tradeCategory update
   */
  export type tradeCategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the tradeCategory
     * 
    **/
    select?: tradeCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tradeCategoryInclude | null
    /**
     * The data needed to update a tradeCategory.
     * 
    **/
    data: XOR<tradeCategoryUpdateInput, tradeCategoryUncheckedUpdateInput>
    /**
     * Choose, which tradeCategory to update.
     * 
    **/
    where: tradeCategoryWhereUniqueInput
  }


  /**
   * tradeCategory updateMany
   */
  export type tradeCategoryUpdateManyArgs = {
    /**
     * The data used to update tradeCategories.
     * 
    **/
    data: XOR<tradeCategoryUpdateManyMutationInput, tradeCategoryUncheckedUpdateManyInput>
    /**
     * Filter which tradeCategories to update
     * 
    **/
    where?: tradeCategoryWhereInput
  }


  /**
   * tradeCategory upsert
   */
  export type tradeCategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the tradeCategory
     * 
    **/
    select?: tradeCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tradeCategoryInclude | null
    /**
     * The filter to search for the tradeCategory to update in case it exists.
     * 
    **/
    where: tradeCategoryWhereUniqueInput
    /**
     * In case the tradeCategory found by the `where` argument doesn't exist, create a new tradeCategory with this data.
     * 
    **/
    create: XOR<tradeCategoryCreateInput, tradeCategoryUncheckedCreateInput>
    /**
     * In case the tradeCategory was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<tradeCategoryUpdateInput, tradeCategoryUncheckedUpdateInput>
  }


  /**
   * tradeCategory delete
   */
  export type tradeCategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the tradeCategory
     * 
    **/
    select?: tradeCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tradeCategoryInclude | null
    /**
     * Filter which tradeCategory to delete.
     * 
    **/
    where: tradeCategoryWhereUniqueInput
  }


  /**
   * tradeCategory deleteMany
   */
  export type tradeCategoryDeleteManyArgs = {
    /**
     * Filter which tradeCategories to delete
     * 
    **/
    where?: tradeCategoryWhereInput
  }


  /**
   * tradeCategory without action
   */
  export type tradeCategoryArgs = {
    /**
     * Select specific fields to fetch from the tradeCategory
     * 
    **/
    select?: tradeCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tradeCategoryInclude | null
  }



  /**
   * Model tradePost
   */


  export type AggregateTradePost = {
    _count: TradePostCountAggregateOutputType | null
    _avg: TradePostAvgAggregateOutputType | null
    _sum: TradePostSumAggregateOutputType | null
    _min: TradePostMinAggregateOutputType | null
    _max: TradePostMaxAggregateOutputType | null
  }

  export type TradePostAvgAggregateOutputType = {
    id: number | null
    price: number | null
    hitCount: number | null
    userId: number | null
    categoryId: number | null
  }

  export type TradePostSumAggregateOutputType = {
    id: number | null
    price: number | null
    hitCount: number | null
    userId: number | null
    categoryId: number | null
  }

  export type TradePostMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deleted: Date | null
    title: string | null
    content: string | null
    price: number | null
    salesType: salesType | null
    hitCount: number | null
    isHide: boolean | null
    isPriceOffer: boolean | null
    userId: number | null
    categoryId: number | null
    lsmdAdmSectUmdId: string | null
  }

  export type TradePostMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deleted: Date | null
    title: string | null
    content: string | null
    price: number | null
    salesType: salesType | null
    hitCount: number | null
    isHide: boolean | null
    isPriceOffer: boolean | null
    userId: number | null
    categoryId: number | null
    lsmdAdmSectUmdId: string | null
  }

  export type TradePostCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    deleted: number
    title: number
    content: number
    price: number
    salesType: number
    hitCount: number
    isHide: number
    isPriceOffer: number
    userId: number
    categoryId: number
    lsmdAdmSectUmdId: number
    _all: number
  }


  export type TradePostAvgAggregateInputType = {
    id?: true
    price?: true
    hitCount?: true
    userId?: true
    categoryId?: true
  }

  export type TradePostSumAggregateInputType = {
    id?: true
    price?: true
    hitCount?: true
    userId?: true
    categoryId?: true
  }

  export type TradePostMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    title?: true
    content?: true
    price?: true
    salesType?: true
    hitCount?: true
    isHide?: true
    isPriceOffer?: true
    userId?: true
    categoryId?: true
    lsmdAdmSectUmdId?: true
  }

  export type TradePostMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    title?: true
    content?: true
    price?: true
    salesType?: true
    hitCount?: true
    isHide?: true
    isPriceOffer?: true
    userId?: true
    categoryId?: true
    lsmdAdmSectUmdId?: true
  }

  export type TradePostCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    title?: true
    content?: true
    price?: true
    salesType?: true
    hitCount?: true
    isHide?: true
    isPriceOffer?: true
    userId?: true
    categoryId?: true
    lsmdAdmSectUmdId?: true
    _all?: true
  }

  export type TradePostAggregateArgs = {
    /**
     * Filter which tradePost to aggregate.
     * 
    **/
    where?: tradePostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tradePosts to fetch.
     * 
    **/
    orderBy?: Enumerable<tradePostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: tradePostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tradePosts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tradePosts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tradePosts
    **/
    _count?: true | TradePostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TradePostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TradePostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TradePostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TradePostMaxAggregateInputType
  }

  export type GetTradePostAggregateType<T extends TradePostAggregateArgs> = {
        [P in keyof T & keyof AggregateTradePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTradePost[P]>
      : GetScalarType<T[P], AggregateTradePost[P]>
  }




  export type TradePostGroupByArgs = {
    where?: tradePostWhereInput
    orderBy?: Enumerable<tradePostOrderByWithAggregationInput>
    by: Array<TradePostScalarFieldEnum>
    having?: tradePostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TradePostCountAggregateInputType | true
    _avg?: TradePostAvgAggregateInputType
    _sum?: TradePostSumAggregateInputType
    _min?: TradePostMinAggregateInputType
    _max?: TradePostMaxAggregateInputType
  }


  export type TradePostGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    deleted: Date | null
    title: string
    content: string
    price: number
    salesType: salesType
    hitCount: number
    isHide: boolean
    isPriceOffer: boolean
    userId: number
    categoryId: number
    lsmdAdmSectUmdId: string
    _count: TradePostCountAggregateOutputType | null
    _avg: TradePostAvgAggregateOutputType | null
    _sum: TradePostSumAggregateOutputType | null
    _min: TradePostMinAggregateOutputType | null
    _max: TradePostMaxAggregateOutputType | null
  }

  type GetTradePostGroupByPayload<T extends TradePostGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TradePostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TradePostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TradePostGroupByOutputType[P]>
            : GetScalarType<T[P], TradePostGroupByOutputType[P]>
        }
      >
    >


  export type tradePostSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deleted?: boolean
    title?: boolean
    content?: boolean
    price?: boolean
    salesType?: boolean
    hitCount?: boolean
    isHide?: boolean
    isPriceOffer?: boolean
    user?: boolean | userArgs
    userId?: boolean
    category?: boolean | tradeCategoryArgs
    categoryId?: boolean
    tradeInterest?: boolean | tradeInterestFindManyArgs
    lsmdAdmSectUmd?: boolean | lsmdAdmSectUmdArgs
    lsmdAdmSectUmdId?: boolean
    _count?: boolean | TradePostCountOutputTypeArgs
  }

  export type tradePostInclude = {
    user?: boolean | userArgs
    category?: boolean | tradeCategoryArgs
    tradeInterest?: boolean | tradeInterestFindManyArgs
    lsmdAdmSectUmd?: boolean | lsmdAdmSectUmdArgs
    _count?: boolean | TradePostCountOutputTypeArgs
  }

  export type tradePostGetPayload<
    S extends boolean | null | undefined | tradePostArgs,
    U = keyof S
      > = S extends true
        ? tradePost
    : S extends undefined
    ? never
    : S extends tradePostArgs | tradePostFindManyArgs
    ?'include' extends U
    ? tradePost  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? userGetPayload<S['include'][P]> :
        P extends 'category' ? tradeCategoryGetPayload<S['include'][P]> :
        P extends 'tradeInterest' ? Array < tradeInterestGetPayload<S['include'][P]>>  :
        P extends 'lsmdAdmSectUmd' ? lsmdAdmSectUmdGetPayload<S['include'][P]> :
        P extends '_count' ? TradePostCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? userGetPayload<S['select'][P]> :
        P extends 'category' ? tradeCategoryGetPayload<S['select'][P]> :
        P extends 'tradeInterest' ? Array < tradeInterestGetPayload<S['select'][P]>>  :
        P extends 'lsmdAdmSectUmd' ? lsmdAdmSectUmdGetPayload<S['select'][P]> :
        P extends '_count' ? TradePostCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof tradePost ? tradePost[P] : never
  } 
    : tradePost
  : tradePost


  type tradePostCountArgs = Merge<
    Omit<tradePostFindManyArgs, 'select' | 'include'> & {
      select?: TradePostCountAggregateInputType | true
    }
  >

  export interface tradePostDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one TradePost that matches the filter.
     * @param {tradePostFindUniqueArgs} args - Arguments to find a TradePost
     * @example
     * // Get one TradePost
     * const tradePost = await prisma.tradePost.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tradePostFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tradePostFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tradePost'> extends True ? CheckSelect<T, Prisma__tradePostClient<tradePost>, Prisma__tradePostClient<tradePostGetPayload<T>>> : CheckSelect<T, Prisma__tradePostClient<tradePost | null >, Prisma__tradePostClient<tradePostGetPayload<T> | null >>

    /**
     * Find the first TradePost that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tradePostFindFirstArgs} args - Arguments to find a TradePost
     * @example
     * // Get one TradePost
     * const tradePost = await prisma.tradePost.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tradePostFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tradePostFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tradePost'> extends True ? CheckSelect<T, Prisma__tradePostClient<tradePost>, Prisma__tradePostClient<tradePostGetPayload<T>>> : CheckSelect<T, Prisma__tradePostClient<tradePost | null >, Prisma__tradePostClient<tradePostGetPayload<T> | null >>

    /**
     * Find zero or more TradePosts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tradePostFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TradePosts
     * const tradePosts = await prisma.tradePost.findMany()
     * 
     * // Get first 10 TradePosts
     * const tradePosts = await prisma.tradePost.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tradePostWithIdOnly = await prisma.tradePost.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends tradePostFindManyArgs>(
      args?: SelectSubset<T, tradePostFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<tradePost>>, PrismaPromise<Array<tradePostGetPayload<T>>>>

    /**
     * Create a TradePost.
     * @param {tradePostCreateArgs} args - Arguments to create a TradePost.
     * @example
     * // Create one TradePost
     * const TradePost = await prisma.tradePost.create({
     *   data: {
     *     // ... data to create a TradePost
     *   }
     * })
     * 
    **/
    create<T extends tradePostCreateArgs>(
      args: SelectSubset<T, tradePostCreateArgs>
    ): CheckSelect<T, Prisma__tradePostClient<tradePost>, Prisma__tradePostClient<tradePostGetPayload<T>>>

    /**
     * Create many TradePosts.
     *     @param {tradePostCreateManyArgs} args - Arguments to create many TradePosts.
     *     @example
     *     // Create many TradePosts
     *     const tradePost = await prisma.tradePost.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tradePostCreateManyArgs>(
      args?: SelectSubset<T, tradePostCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a TradePost.
     * @param {tradePostDeleteArgs} args - Arguments to delete one TradePost.
     * @example
     * // Delete one TradePost
     * const TradePost = await prisma.tradePost.delete({
     *   where: {
     *     // ... filter to delete one TradePost
     *   }
     * })
     * 
    **/
    delete<T extends tradePostDeleteArgs>(
      args: SelectSubset<T, tradePostDeleteArgs>
    ): CheckSelect<T, Prisma__tradePostClient<tradePost>, Prisma__tradePostClient<tradePostGetPayload<T>>>

    /**
     * Update one TradePost.
     * @param {tradePostUpdateArgs} args - Arguments to update one TradePost.
     * @example
     * // Update one TradePost
     * const tradePost = await prisma.tradePost.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tradePostUpdateArgs>(
      args: SelectSubset<T, tradePostUpdateArgs>
    ): CheckSelect<T, Prisma__tradePostClient<tradePost>, Prisma__tradePostClient<tradePostGetPayload<T>>>

    /**
     * Delete zero or more TradePosts.
     * @param {tradePostDeleteManyArgs} args - Arguments to filter TradePosts to delete.
     * @example
     * // Delete a few TradePosts
     * const { count } = await prisma.tradePost.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tradePostDeleteManyArgs>(
      args?: SelectSubset<T, tradePostDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more TradePosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tradePostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TradePosts
     * const tradePost = await prisma.tradePost.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tradePostUpdateManyArgs>(
      args: SelectSubset<T, tradePostUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one TradePost.
     * @param {tradePostUpsertArgs} args - Arguments to update or create a TradePost.
     * @example
     * // Update or create a TradePost
     * const tradePost = await prisma.tradePost.upsert({
     *   create: {
     *     // ... data to create a TradePost
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TradePost we want to update
     *   }
     * })
    **/
    upsert<T extends tradePostUpsertArgs>(
      args: SelectSubset<T, tradePostUpsertArgs>
    ): CheckSelect<T, Prisma__tradePostClient<tradePost>, Prisma__tradePostClient<tradePostGetPayload<T>>>

    /**
     * Count the number of TradePosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tradePostCountArgs} args - Arguments to filter TradePosts to count.
     * @example
     * // Count the number of TradePosts
     * const count = await prisma.tradePost.count({
     *   where: {
     *     // ... the filter for the TradePosts we want to count
     *   }
     * })
    **/
    count<T extends tradePostCountArgs>(
      args?: Subset<T, tradePostCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TradePostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TradePost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradePostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TradePostAggregateArgs>(args: Subset<T, TradePostAggregateArgs>): PrismaPromise<GetTradePostAggregateType<T>>

    /**
     * Group by TradePost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradePostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TradePostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TradePostGroupByArgs['orderBy'] }
        : { orderBy?: TradePostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TradePostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTradePostGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for tradePost.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tradePostClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>;

    category<T extends tradeCategoryArgs = {}>(args?: Subset<T, tradeCategoryArgs>): CheckSelect<T, Prisma__tradeCategoryClient<tradeCategory | null >, Prisma__tradeCategoryClient<tradeCategoryGetPayload<T> | null >>;

    tradeInterest<T extends tradeInterestFindManyArgs = {}>(args?: Subset<T, tradeInterestFindManyArgs>): CheckSelect<T, PrismaPromise<Array<tradeInterest>>, PrismaPromise<Array<tradeInterestGetPayload<T>>>>;

    lsmdAdmSectUmd<T extends lsmdAdmSectUmdArgs = {}>(args?: Subset<T, lsmdAdmSectUmdArgs>): CheckSelect<T, Prisma__lsmdAdmSectUmdClient<lsmdAdmSectUmd | null >, Prisma__lsmdAdmSectUmdClient<lsmdAdmSectUmdGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * tradePost findUnique
   */
  export type tradePostFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the tradePost
     * 
    **/
    select?: tradePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tradePostInclude | null
    /**
     * Throw an Error if a tradePost can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tradePost to fetch.
     * 
    **/
    where: tradePostWhereUniqueInput
  }


  /**
   * tradePost findFirst
   */
  export type tradePostFindFirstArgs = {
    /**
     * Select specific fields to fetch from the tradePost
     * 
    **/
    select?: tradePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tradePostInclude | null
    /**
     * Throw an Error if a tradePost can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tradePost to fetch.
     * 
    **/
    where?: tradePostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tradePosts to fetch.
     * 
    **/
    orderBy?: Enumerable<tradePostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tradePosts.
     * 
    **/
    cursor?: tradePostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tradePosts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tradePosts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tradePosts.
     * 
    **/
    distinct?: Enumerable<TradePostScalarFieldEnum>
  }


  /**
   * tradePost findMany
   */
  export type tradePostFindManyArgs = {
    /**
     * Select specific fields to fetch from the tradePost
     * 
    **/
    select?: tradePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tradePostInclude | null
    /**
     * Filter, which tradePosts to fetch.
     * 
    **/
    where?: tradePostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tradePosts to fetch.
     * 
    **/
    orderBy?: Enumerable<tradePostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tradePosts.
     * 
    **/
    cursor?: tradePostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tradePosts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tradePosts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TradePostScalarFieldEnum>
  }


  /**
   * tradePost create
   */
  export type tradePostCreateArgs = {
    /**
     * Select specific fields to fetch from the tradePost
     * 
    **/
    select?: tradePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tradePostInclude | null
    /**
     * The data needed to create a tradePost.
     * 
    **/
    data: XOR<tradePostCreateInput, tradePostUncheckedCreateInput>
  }


  /**
   * tradePost createMany
   */
  export type tradePostCreateManyArgs = {
    /**
     * The data used to create many tradePosts.
     * 
    **/
    data: Enumerable<tradePostCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tradePost update
   */
  export type tradePostUpdateArgs = {
    /**
     * Select specific fields to fetch from the tradePost
     * 
    **/
    select?: tradePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tradePostInclude | null
    /**
     * The data needed to update a tradePost.
     * 
    **/
    data: XOR<tradePostUpdateInput, tradePostUncheckedUpdateInput>
    /**
     * Choose, which tradePost to update.
     * 
    **/
    where: tradePostWhereUniqueInput
  }


  /**
   * tradePost updateMany
   */
  export type tradePostUpdateManyArgs = {
    /**
     * The data used to update tradePosts.
     * 
    **/
    data: XOR<tradePostUpdateManyMutationInput, tradePostUncheckedUpdateManyInput>
    /**
     * Filter which tradePosts to update
     * 
    **/
    where?: tradePostWhereInput
  }


  /**
   * tradePost upsert
   */
  export type tradePostUpsertArgs = {
    /**
     * Select specific fields to fetch from the tradePost
     * 
    **/
    select?: tradePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tradePostInclude | null
    /**
     * The filter to search for the tradePost to update in case it exists.
     * 
    **/
    where: tradePostWhereUniqueInput
    /**
     * In case the tradePost found by the `where` argument doesn't exist, create a new tradePost with this data.
     * 
    **/
    create: XOR<tradePostCreateInput, tradePostUncheckedCreateInput>
    /**
     * In case the tradePost was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<tradePostUpdateInput, tradePostUncheckedUpdateInput>
  }


  /**
   * tradePost delete
   */
  export type tradePostDeleteArgs = {
    /**
     * Select specific fields to fetch from the tradePost
     * 
    **/
    select?: tradePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tradePostInclude | null
    /**
     * Filter which tradePost to delete.
     * 
    **/
    where: tradePostWhereUniqueInput
  }


  /**
   * tradePost deleteMany
   */
  export type tradePostDeleteManyArgs = {
    /**
     * Filter which tradePosts to delete
     * 
    **/
    where?: tradePostWhereInput
  }


  /**
   * tradePost without action
   */
  export type tradePostArgs = {
    /**
     * Select specific fields to fetch from the tradePost
     * 
    **/
    select?: tradePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tradePostInclude | null
  }



  /**
   * Model tradeInterest
   */


  export type AggregateTradeInterest = {
    _count: TradeInterestCountAggregateOutputType | null
    _avg: TradeInterestAvgAggregateOutputType | null
    _sum: TradeInterestSumAggregateOutputType | null
    _min: TradeInterestMinAggregateOutputType | null
    _max: TradeInterestMaxAggregateOutputType | null
  }

  export type TradeInterestAvgAggregateOutputType = {
    tradePostId: number | null
    userId: number | null
  }

  export type TradeInterestSumAggregateOutputType = {
    tradePostId: number | null
    userId: number | null
  }

  export type TradeInterestMinAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    deleted: Date | null
    tradePostId: number | null
    userId: number | null
  }

  export type TradeInterestMaxAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    deleted: Date | null
    tradePostId: number | null
    userId: number | null
  }

  export type TradeInterestCountAggregateOutputType = {
    createdAt: number
    updatedAt: number
    deleted: number
    tradePostId: number
    userId: number
    _all: number
  }


  export type TradeInterestAvgAggregateInputType = {
    tradePostId?: true
    userId?: true
  }

  export type TradeInterestSumAggregateInputType = {
    tradePostId?: true
    userId?: true
  }

  export type TradeInterestMinAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deleted?: true
    tradePostId?: true
    userId?: true
  }

  export type TradeInterestMaxAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deleted?: true
    tradePostId?: true
    userId?: true
  }

  export type TradeInterestCountAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deleted?: true
    tradePostId?: true
    userId?: true
    _all?: true
  }

  export type TradeInterestAggregateArgs = {
    /**
     * Filter which tradeInterest to aggregate.
     * 
    **/
    where?: tradeInterestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tradeInterests to fetch.
     * 
    **/
    orderBy?: Enumerable<tradeInterestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: tradeInterestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tradeInterests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tradeInterests.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tradeInterests
    **/
    _count?: true | TradeInterestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TradeInterestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TradeInterestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TradeInterestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TradeInterestMaxAggregateInputType
  }

  export type GetTradeInterestAggregateType<T extends TradeInterestAggregateArgs> = {
        [P in keyof T & keyof AggregateTradeInterest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTradeInterest[P]>
      : GetScalarType<T[P], AggregateTradeInterest[P]>
  }




  export type TradeInterestGroupByArgs = {
    where?: tradeInterestWhereInput
    orderBy?: Enumerable<tradeInterestOrderByWithAggregationInput>
    by: Array<TradeInterestScalarFieldEnum>
    having?: tradeInterestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TradeInterestCountAggregateInputType | true
    _avg?: TradeInterestAvgAggregateInputType
    _sum?: TradeInterestSumAggregateInputType
    _min?: TradeInterestMinAggregateInputType
    _max?: TradeInterestMaxAggregateInputType
  }


  export type TradeInterestGroupByOutputType = {
    createdAt: Date
    updatedAt: Date
    deleted: Date | null
    tradePostId: number
    userId: number
    _count: TradeInterestCountAggregateOutputType | null
    _avg: TradeInterestAvgAggregateOutputType | null
    _sum: TradeInterestSumAggregateOutputType | null
    _min: TradeInterestMinAggregateOutputType | null
    _max: TradeInterestMaxAggregateOutputType | null
  }

  type GetTradeInterestGroupByPayload<T extends TradeInterestGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TradeInterestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TradeInterestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TradeInterestGroupByOutputType[P]>
            : GetScalarType<T[P], TradeInterestGroupByOutputType[P]>
        }
      >
    >


  export type tradeInterestSelect = {
    createdAt?: boolean
    updatedAt?: boolean
    deleted?: boolean
    tradePost?: boolean | tradePostArgs
    tradePostId?: boolean
    user?: boolean | userArgs
    userId?: boolean
  }

  export type tradeInterestInclude = {
    tradePost?: boolean | tradePostArgs
    user?: boolean | userArgs
  }

  export type tradeInterestGetPayload<
    S extends boolean | null | undefined | tradeInterestArgs,
    U = keyof S
      > = S extends true
        ? tradeInterest
    : S extends undefined
    ? never
    : S extends tradeInterestArgs | tradeInterestFindManyArgs
    ?'include' extends U
    ? tradeInterest  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tradePost' ? tradePostGetPayload<S['include'][P]> :
        P extends 'user' ? userGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tradePost' ? tradePostGetPayload<S['select'][P]> :
        P extends 'user' ? userGetPayload<S['select'][P]> :  P extends keyof tradeInterest ? tradeInterest[P] : never
  } 
    : tradeInterest
  : tradeInterest


  type tradeInterestCountArgs = Merge<
    Omit<tradeInterestFindManyArgs, 'select' | 'include'> & {
      select?: TradeInterestCountAggregateInputType | true
    }
  >

  export interface tradeInterestDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one TradeInterest that matches the filter.
     * @param {tradeInterestFindUniqueArgs} args - Arguments to find a TradeInterest
     * @example
     * // Get one TradeInterest
     * const tradeInterest = await prisma.tradeInterest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tradeInterestFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tradeInterestFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tradeInterest'> extends True ? CheckSelect<T, Prisma__tradeInterestClient<tradeInterest>, Prisma__tradeInterestClient<tradeInterestGetPayload<T>>> : CheckSelect<T, Prisma__tradeInterestClient<tradeInterest | null >, Prisma__tradeInterestClient<tradeInterestGetPayload<T> | null >>

    /**
     * Find the first TradeInterest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tradeInterestFindFirstArgs} args - Arguments to find a TradeInterest
     * @example
     * // Get one TradeInterest
     * const tradeInterest = await prisma.tradeInterest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tradeInterestFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tradeInterestFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tradeInterest'> extends True ? CheckSelect<T, Prisma__tradeInterestClient<tradeInterest>, Prisma__tradeInterestClient<tradeInterestGetPayload<T>>> : CheckSelect<T, Prisma__tradeInterestClient<tradeInterest | null >, Prisma__tradeInterestClient<tradeInterestGetPayload<T> | null >>

    /**
     * Find zero or more TradeInterests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tradeInterestFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TradeInterests
     * const tradeInterests = await prisma.tradeInterest.findMany()
     * 
     * // Get first 10 TradeInterests
     * const tradeInterests = await prisma.tradeInterest.findMany({ take: 10 })
     * 
     * // Only select the `createdAt`
     * const tradeInterestWithCreatedAtOnly = await prisma.tradeInterest.findMany({ select: { createdAt: true } })
     * 
    **/
    findMany<T extends tradeInterestFindManyArgs>(
      args?: SelectSubset<T, tradeInterestFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<tradeInterest>>, PrismaPromise<Array<tradeInterestGetPayload<T>>>>

    /**
     * Create a TradeInterest.
     * @param {tradeInterestCreateArgs} args - Arguments to create a TradeInterest.
     * @example
     * // Create one TradeInterest
     * const TradeInterest = await prisma.tradeInterest.create({
     *   data: {
     *     // ... data to create a TradeInterest
     *   }
     * })
     * 
    **/
    create<T extends tradeInterestCreateArgs>(
      args: SelectSubset<T, tradeInterestCreateArgs>
    ): CheckSelect<T, Prisma__tradeInterestClient<tradeInterest>, Prisma__tradeInterestClient<tradeInterestGetPayload<T>>>

    /**
     * Create many TradeInterests.
     *     @param {tradeInterestCreateManyArgs} args - Arguments to create many TradeInterests.
     *     @example
     *     // Create many TradeInterests
     *     const tradeInterest = await prisma.tradeInterest.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tradeInterestCreateManyArgs>(
      args?: SelectSubset<T, tradeInterestCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a TradeInterest.
     * @param {tradeInterestDeleteArgs} args - Arguments to delete one TradeInterest.
     * @example
     * // Delete one TradeInterest
     * const TradeInterest = await prisma.tradeInterest.delete({
     *   where: {
     *     // ... filter to delete one TradeInterest
     *   }
     * })
     * 
    **/
    delete<T extends tradeInterestDeleteArgs>(
      args: SelectSubset<T, tradeInterestDeleteArgs>
    ): CheckSelect<T, Prisma__tradeInterestClient<tradeInterest>, Prisma__tradeInterestClient<tradeInterestGetPayload<T>>>

    /**
     * Update one TradeInterest.
     * @param {tradeInterestUpdateArgs} args - Arguments to update one TradeInterest.
     * @example
     * // Update one TradeInterest
     * const tradeInterest = await prisma.tradeInterest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tradeInterestUpdateArgs>(
      args: SelectSubset<T, tradeInterestUpdateArgs>
    ): CheckSelect<T, Prisma__tradeInterestClient<tradeInterest>, Prisma__tradeInterestClient<tradeInterestGetPayload<T>>>

    /**
     * Delete zero or more TradeInterests.
     * @param {tradeInterestDeleteManyArgs} args - Arguments to filter TradeInterests to delete.
     * @example
     * // Delete a few TradeInterests
     * const { count } = await prisma.tradeInterest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tradeInterestDeleteManyArgs>(
      args?: SelectSubset<T, tradeInterestDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more TradeInterests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tradeInterestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TradeInterests
     * const tradeInterest = await prisma.tradeInterest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tradeInterestUpdateManyArgs>(
      args: SelectSubset<T, tradeInterestUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one TradeInterest.
     * @param {tradeInterestUpsertArgs} args - Arguments to update or create a TradeInterest.
     * @example
     * // Update or create a TradeInterest
     * const tradeInterest = await prisma.tradeInterest.upsert({
     *   create: {
     *     // ... data to create a TradeInterest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TradeInterest we want to update
     *   }
     * })
    **/
    upsert<T extends tradeInterestUpsertArgs>(
      args: SelectSubset<T, tradeInterestUpsertArgs>
    ): CheckSelect<T, Prisma__tradeInterestClient<tradeInterest>, Prisma__tradeInterestClient<tradeInterestGetPayload<T>>>

    /**
     * Count the number of TradeInterests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tradeInterestCountArgs} args - Arguments to filter TradeInterests to count.
     * @example
     * // Count the number of TradeInterests
     * const count = await prisma.tradeInterest.count({
     *   where: {
     *     // ... the filter for the TradeInterests we want to count
     *   }
     * })
    **/
    count<T extends tradeInterestCountArgs>(
      args?: Subset<T, tradeInterestCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TradeInterestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TradeInterest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeInterestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TradeInterestAggregateArgs>(args: Subset<T, TradeInterestAggregateArgs>): PrismaPromise<GetTradeInterestAggregateType<T>>

    /**
     * Group by TradeInterest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeInterestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TradeInterestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TradeInterestGroupByArgs['orderBy'] }
        : { orderBy?: TradeInterestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TradeInterestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTradeInterestGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for tradeInterest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tradeInterestClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tradePost<T extends tradePostArgs = {}>(args?: Subset<T, tradePostArgs>): CheckSelect<T, Prisma__tradePostClient<tradePost | null >, Prisma__tradePostClient<tradePostGetPayload<T> | null >>;

    user<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * tradeInterest findUnique
   */
  export type tradeInterestFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the tradeInterest
     * 
    **/
    select?: tradeInterestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tradeInterestInclude | null
    /**
     * Throw an Error if a tradeInterest can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tradeInterest to fetch.
     * 
    **/
    where: tradeInterestWhereUniqueInput
  }


  /**
   * tradeInterest findFirst
   */
  export type tradeInterestFindFirstArgs = {
    /**
     * Select specific fields to fetch from the tradeInterest
     * 
    **/
    select?: tradeInterestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tradeInterestInclude | null
    /**
     * Throw an Error if a tradeInterest can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tradeInterest to fetch.
     * 
    **/
    where?: tradeInterestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tradeInterests to fetch.
     * 
    **/
    orderBy?: Enumerable<tradeInterestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tradeInterests.
     * 
    **/
    cursor?: tradeInterestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tradeInterests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tradeInterests.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tradeInterests.
     * 
    **/
    distinct?: Enumerable<TradeInterestScalarFieldEnum>
  }


  /**
   * tradeInterest findMany
   */
  export type tradeInterestFindManyArgs = {
    /**
     * Select specific fields to fetch from the tradeInterest
     * 
    **/
    select?: tradeInterestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tradeInterestInclude | null
    /**
     * Filter, which tradeInterests to fetch.
     * 
    **/
    where?: tradeInterestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tradeInterests to fetch.
     * 
    **/
    orderBy?: Enumerable<tradeInterestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tradeInterests.
     * 
    **/
    cursor?: tradeInterestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tradeInterests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tradeInterests.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TradeInterestScalarFieldEnum>
  }


  /**
   * tradeInterest create
   */
  export type tradeInterestCreateArgs = {
    /**
     * Select specific fields to fetch from the tradeInterest
     * 
    **/
    select?: tradeInterestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tradeInterestInclude | null
    /**
     * The data needed to create a tradeInterest.
     * 
    **/
    data: XOR<tradeInterestCreateInput, tradeInterestUncheckedCreateInput>
  }


  /**
   * tradeInterest createMany
   */
  export type tradeInterestCreateManyArgs = {
    /**
     * The data used to create many tradeInterests.
     * 
    **/
    data: Enumerable<tradeInterestCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tradeInterest update
   */
  export type tradeInterestUpdateArgs = {
    /**
     * Select specific fields to fetch from the tradeInterest
     * 
    **/
    select?: tradeInterestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tradeInterestInclude | null
    /**
     * The data needed to update a tradeInterest.
     * 
    **/
    data: XOR<tradeInterestUpdateInput, tradeInterestUncheckedUpdateInput>
    /**
     * Choose, which tradeInterest to update.
     * 
    **/
    where: tradeInterestWhereUniqueInput
  }


  /**
   * tradeInterest updateMany
   */
  export type tradeInterestUpdateManyArgs = {
    /**
     * The data used to update tradeInterests.
     * 
    **/
    data: XOR<tradeInterestUpdateManyMutationInput, tradeInterestUncheckedUpdateManyInput>
    /**
     * Filter which tradeInterests to update
     * 
    **/
    where?: tradeInterestWhereInput
  }


  /**
   * tradeInterest upsert
   */
  export type tradeInterestUpsertArgs = {
    /**
     * Select specific fields to fetch from the tradeInterest
     * 
    **/
    select?: tradeInterestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tradeInterestInclude | null
    /**
     * The filter to search for the tradeInterest to update in case it exists.
     * 
    **/
    where: tradeInterestWhereUniqueInput
    /**
     * In case the tradeInterest found by the `where` argument doesn't exist, create a new tradeInterest with this data.
     * 
    **/
    create: XOR<tradeInterestCreateInput, tradeInterestUncheckedCreateInput>
    /**
     * In case the tradeInterest was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<tradeInterestUpdateInput, tradeInterestUncheckedUpdateInput>
  }


  /**
   * tradeInterest delete
   */
  export type tradeInterestDeleteArgs = {
    /**
     * Select specific fields to fetch from the tradeInterest
     * 
    **/
    select?: tradeInterestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tradeInterestInclude | null
    /**
     * Filter which tradeInterest to delete.
     * 
    **/
    where: tradeInterestWhereUniqueInput
  }


  /**
   * tradeInterest deleteMany
   */
  export type tradeInterestDeleteManyArgs = {
    /**
     * Filter which tradeInterests to delete
     * 
    **/
    where?: tradeInterestWhereInput
  }


  /**
   * tradeInterest without action
   */
  export type tradeInterestArgs = {
    /**
     * Select specific fields to fetch from the tradeInterest
     * 
    **/
    select?: tradeInterestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tradeInterestInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deleted: 'deleted',
    phone: 'phone',
    email: 'email',
    name: 'name',
    password: 'password',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const LsmdAdmSectUmdScalarFieldEnum: {
    id: 'id',
    emdCd: 'emdCd',
    emdNm: 'emdNm',
    ssgOid: 'ssgOid',
    colAdmSe: 'colAdmSe',
    gid: 'gid'
  };

  export type LsmdAdmSectUmdScalarFieldEnum = (typeof LsmdAdmSectUmdScalarFieldEnum)[keyof typeof LsmdAdmSectUmdScalarFieldEnum]


  export const TradeCategoryScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deleted: 'deleted',
    name: 'name',
    imageSrc: 'imageSrc'
  };

  export type TradeCategoryScalarFieldEnum = (typeof TradeCategoryScalarFieldEnum)[keyof typeof TradeCategoryScalarFieldEnum]


  export const TradePostScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deleted: 'deleted',
    title: 'title',
    content: 'content',
    price: 'price',
    salesType: 'salesType',
    hitCount: 'hitCount',
    isHide: 'isHide',
    isPriceOffer: 'isPriceOffer',
    userId: 'userId',
    categoryId: 'categoryId',
    lsmdAdmSectUmdId: 'lsmdAdmSectUmdId'
  };

  export type TradePostScalarFieldEnum = (typeof TradePostScalarFieldEnum)[keyof typeof TradePostScalarFieldEnum]


  export const TradeInterestScalarFieldEnum: {
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deleted: 'deleted',
    tradePostId: 'tradePostId',
    userId: 'userId'
  };

  export type TradeInterestScalarFieldEnum = (typeof TradeInterestScalarFieldEnum)[keyof typeof TradeInterestScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type userWhereInput = {
    AND?: Enumerable<userWhereInput>
    OR?: Enumerable<userWhereInput>
    NOT?: Enumerable<userWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    deleted?: DateTimeNullableFilter | Date | string | null
    phone?: IntNullableFilter | number | null
    email?: StringFilter | string
    name?: StringFilter | string
    password?: StringFilter | string
    role?: EnumroleFilter | role
    tradePosts?: TradePostListRelationFilter
    tradeInterest?: TradeInterestListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    tradePosts?: tradePostOrderByRelationAggregateInput
    tradeInterest?: tradeInterestOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = {
    id?: number
    phone?: number
    email?: string
  }

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: Enumerable<userScalarWhereWithAggregatesInput>
    OR?: Enumerable<userScalarWhereWithAggregatesInput>
    NOT?: Enumerable<userScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    deleted?: DateTimeNullableWithAggregatesFilter | Date | string | null
    phone?: IntNullableWithAggregatesFilter | number | null
    email?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    role?: EnumroleWithAggregatesFilter | role
  }

  export type lsmdAdmSectUmdWhereInput = {
    AND?: Enumerable<lsmdAdmSectUmdWhereInput>
    OR?: Enumerable<lsmdAdmSectUmdWhereInput>
    NOT?: Enumerable<lsmdAdmSectUmdWhereInput>
    id?: IntFilter | number
    emdCd?: StringFilter | string
    emdNm?: StringFilter | string
    ssgOid?: IntFilter | number
    colAdmSe?: StringFilter | string
    gid?: IntFilter | number
    tradePost?: TradePostListRelationFilter
  }

  export type lsmdAdmSectUmdOrderByWithRelationInput = {
    id?: SortOrder
    emdCd?: SortOrder
    emdNm?: SortOrder
    ssgOid?: SortOrder
    colAdmSe?: SortOrder
    gid?: SortOrder
    tradePost?: tradePostOrderByRelationAggregateInput
  }

  export type lsmdAdmSectUmdWhereUniqueInput = {
    id?: number
  }

  export type lsmdAdmSectUmdOrderByWithAggregationInput = {
    id?: SortOrder
    emdCd?: SortOrder
    emdNm?: SortOrder
    ssgOid?: SortOrder
    colAdmSe?: SortOrder
    gid?: SortOrder
    _count?: lsmdAdmSectUmdCountOrderByAggregateInput
    _avg?: lsmdAdmSectUmdAvgOrderByAggregateInput
    _max?: lsmdAdmSectUmdMaxOrderByAggregateInput
    _min?: lsmdAdmSectUmdMinOrderByAggregateInput
    _sum?: lsmdAdmSectUmdSumOrderByAggregateInput
  }

  export type lsmdAdmSectUmdScalarWhereWithAggregatesInput = {
    AND?: Enumerable<lsmdAdmSectUmdScalarWhereWithAggregatesInput>
    OR?: Enumerable<lsmdAdmSectUmdScalarWhereWithAggregatesInput>
    NOT?: Enumerable<lsmdAdmSectUmdScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    emdCd?: StringWithAggregatesFilter | string
    emdNm?: StringWithAggregatesFilter | string
    ssgOid?: IntWithAggregatesFilter | number
    colAdmSe?: StringWithAggregatesFilter | string
    gid?: IntWithAggregatesFilter | number
  }

  export type tradeCategoryWhereInput = {
    AND?: Enumerable<tradeCategoryWhereInput>
    OR?: Enumerable<tradeCategoryWhereInput>
    NOT?: Enumerable<tradeCategoryWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    deleted?: DateTimeNullableFilter | Date | string | null
    name?: StringFilter | string
    imageSrc?: StringFilter | string
    tradePost?: TradePostListRelationFilter
  }

  export type tradeCategoryOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    name?: SortOrder
    imageSrc?: SortOrder
    tradePost?: tradePostOrderByRelationAggregateInput
  }

  export type tradeCategoryWhereUniqueInput = {
    id?: number
  }

  export type tradeCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    name?: SortOrder
    imageSrc?: SortOrder
    _count?: tradeCategoryCountOrderByAggregateInput
    _avg?: tradeCategoryAvgOrderByAggregateInput
    _max?: tradeCategoryMaxOrderByAggregateInput
    _min?: tradeCategoryMinOrderByAggregateInput
    _sum?: tradeCategorySumOrderByAggregateInput
  }

  export type tradeCategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tradeCategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<tradeCategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tradeCategoryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    deleted?: DateTimeNullableWithAggregatesFilter | Date | string | null
    name?: StringWithAggregatesFilter | string
    imageSrc?: StringWithAggregatesFilter | string
  }

  export type tradePostWhereInput = {
    AND?: Enumerable<tradePostWhereInput>
    OR?: Enumerable<tradePostWhereInput>
    NOT?: Enumerable<tradePostWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    deleted?: DateTimeNullableFilter | Date | string | null
    title?: StringFilter | string
    content?: StringFilter | string
    price?: IntFilter | number
    salesType?: EnumsalesTypeFilter | salesType
    hitCount?: IntFilter | number
    isHide?: BoolFilter | boolean
    isPriceOffer?: BoolFilter | boolean
    user?: XOR<UserRelationFilter, userWhereInput>
    userId?: IntFilter | number
    category?: XOR<TradeCategoryRelationFilter, tradeCategoryWhereInput>
    categoryId?: IntFilter | number
    tradeInterest?: TradeInterestListRelationFilter
    lsmdAdmSectUmd?: XOR<LsmdAdmSectUmdRelationFilter, lsmdAdmSectUmdWhereInput>
    lsmdAdmSectUmdId?: StringFilter | string
  }

  export type tradePostOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    title?: SortOrder
    content?: SortOrder
    price?: SortOrder
    salesType?: SortOrder
    hitCount?: SortOrder
    isHide?: SortOrder
    isPriceOffer?: SortOrder
    user?: userOrderByWithRelationInput
    userId?: SortOrder
    category?: tradeCategoryOrderByWithRelationInput
    categoryId?: SortOrder
    tradeInterest?: tradeInterestOrderByRelationAggregateInput
    lsmdAdmSectUmd?: lsmdAdmSectUmdOrderByWithRelationInput
    lsmdAdmSectUmdId?: SortOrder
  }

  export type tradePostWhereUniqueInput = {
    id?: number
  }

  export type tradePostOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    title?: SortOrder
    content?: SortOrder
    price?: SortOrder
    salesType?: SortOrder
    hitCount?: SortOrder
    isHide?: SortOrder
    isPriceOffer?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    lsmdAdmSectUmdId?: SortOrder
    _count?: tradePostCountOrderByAggregateInput
    _avg?: tradePostAvgOrderByAggregateInput
    _max?: tradePostMaxOrderByAggregateInput
    _min?: tradePostMinOrderByAggregateInput
    _sum?: tradePostSumOrderByAggregateInput
  }

  export type tradePostScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tradePostScalarWhereWithAggregatesInput>
    OR?: Enumerable<tradePostScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tradePostScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    deleted?: DateTimeNullableWithAggregatesFilter | Date | string | null
    title?: StringWithAggregatesFilter | string
    content?: StringWithAggregatesFilter | string
    price?: IntWithAggregatesFilter | number
    salesType?: EnumsalesTypeWithAggregatesFilter | salesType
    hitCount?: IntWithAggregatesFilter | number
    isHide?: BoolWithAggregatesFilter | boolean
    isPriceOffer?: BoolWithAggregatesFilter | boolean
    userId?: IntWithAggregatesFilter | number
    categoryId?: IntWithAggregatesFilter | number
    lsmdAdmSectUmdId?: StringWithAggregatesFilter | string
  }

  export type tradeInterestWhereInput = {
    AND?: Enumerable<tradeInterestWhereInput>
    OR?: Enumerable<tradeInterestWhereInput>
    NOT?: Enumerable<tradeInterestWhereInput>
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    deleted?: DateTimeNullableFilter | Date | string | null
    tradePost?: XOR<TradePostRelationFilter, tradePostWhereInput>
    tradePostId?: IntFilter | number
    user?: XOR<UserRelationFilter, userWhereInput>
    userId?: IntFilter | number
  }

  export type tradeInterestOrderByWithRelationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    tradePost?: tradePostOrderByWithRelationInput
    tradePostId?: SortOrder
    user?: userOrderByWithRelationInput
    userId?: SortOrder
  }

  export type tradeInterestWhereUniqueInput = {
    tradePostId_userId?: tradeInterestTradePostIdUserIdCompoundUniqueInput
  }

  export type tradeInterestOrderByWithAggregationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    tradePostId?: SortOrder
    userId?: SortOrder
    _count?: tradeInterestCountOrderByAggregateInput
    _avg?: tradeInterestAvgOrderByAggregateInput
    _max?: tradeInterestMaxOrderByAggregateInput
    _min?: tradeInterestMinOrderByAggregateInput
    _sum?: tradeInterestSumOrderByAggregateInput
  }

  export type tradeInterestScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tradeInterestScalarWhereWithAggregatesInput>
    OR?: Enumerable<tradeInterestScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tradeInterestScalarWhereWithAggregatesInput>
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    deleted?: DateTimeNullableWithAggregatesFilter | Date | string | null
    tradePostId?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
  }

  export type userCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    phone?: number | null
    email: string
    name: string
    password?: string
    role?: role
    tradePosts?: tradePostCreateNestedManyWithoutUserInput
    tradeInterest?: tradeInterestCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    phone?: number | null
    email: string
    name: string
    password?: string
    role?: role
    tradePosts?: tradePostUncheckedCreateNestedManyWithoutUserInput
    tradeInterest?: tradeInterestUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
    tradePosts?: tradePostUpdateManyWithoutUserInput
    tradeInterest?: tradeInterestUpdateManyWithoutUserInput
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
    tradePosts?: tradePostUncheckedUpdateManyWithoutUserInput
    tradeInterest?: tradeInterestUncheckedUpdateManyWithoutUserInput
  }

  export type userCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    phone?: number | null
    email: string
    name: string
    password?: string
    role?: role
  }

  export type userUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
  }

  export type lsmdAdmSectUmdCreateInput = {
    emdCd: string
    emdNm: string
    ssgOid: number
    colAdmSe: string
    gid: number
    tradePost?: tradePostCreateNestedManyWithoutLsmdAdmSectUmdInput
  }

  export type lsmdAdmSectUmdUncheckedCreateInput = {
    id?: number
    emdCd: string
    emdNm: string
    ssgOid: number
    colAdmSe: string
    gid: number
    tradePost?: tradePostUncheckedCreateNestedManyWithoutLsmdAdmSectUmdInput
  }

  export type lsmdAdmSectUmdUpdateInput = {
    emdCd?: StringFieldUpdateOperationsInput | string
    emdNm?: StringFieldUpdateOperationsInput | string
    ssgOid?: IntFieldUpdateOperationsInput | number
    colAdmSe?: StringFieldUpdateOperationsInput | string
    gid?: IntFieldUpdateOperationsInput | number
    tradePost?: tradePostUpdateManyWithoutLsmdAdmSectUmdInput
  }

  export type lsmdAdmSectUmdUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    emdCd?: StringFieldUpdateOperationsInput | string
    emdNm?: StringFieldUpdateOperationsInput | string
    ssgOid?: IntFieldUpdateOperationsInput | number
    colAdmSe?: StringFieldUpdateOperationsInput | string
    gid?: IntFieldUpdateOperationsInput | number
    tradePost?: tradePostUncheckedUpdateManyWithoutLsmdAdmSectUmdInput
  }

  export type lsmdAdmSectUmdCreateManyInput = {
    id?: number
    emdCd: string
    emdNm: string
    ssgOid: number
    colAdmSe: string
    gid: number
  }

  export type lsmdAdmSectUmdUpdateManyMutationInput = {
    emdCd?: StringFieldUpdateOperationsInput | string
    emdNm?: StringFieldUpdateOperationsInput | string
    ssgOid?: IntFieldUpdateOperationsInput | number
    colAdmSe?: StringFieldUpdateOperationsInput | string
    gid?: IntFieldUpdateOperationsInput | number
  }

  export type lsmdAdmSectUmdUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    emdCd?: StringFieldUpdateOperationsInput | string
    emdNm?: StringFieldUpdateOperationsInput | string
    ssgOid?: IntFieldUpdateOperationsInput | number
    colAdmSe?: StringFieldUpdateOperationsInput | string
    gid?: IntFieldUpdateOperationsInput | number
  }

  export type tradeCategoryCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    name: string
    imageSrc: string
    tradePost?: tradePostCreateNestedManyWithoutCategoryInput
  }

  export type tradeCategoryUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    name: string
    imageSrc: string
    tradePost?: tradePostUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type tradeCategoryUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    imageSrc?: StringFieldUpdateOperationsInput | string
    tradePost?: tradePostUpdateManyWithoutCategoryInput
  }

  export type tradeCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    imageSrc?: StringFieldUpdateOperationsInput | string
    tradePost?: tradePostUncheckedUpdateManyWithoutCategoryInput
  }

  export type tradeCategoryCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    name: string
    imageSrc: string
  }

  export type tradeCategoryUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    imageSrc?: StringFieldUpdateOperationsInput | string
  }

  export type tradeCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    imageSrc?: StringFieldUpdateOperationsInput | string
  }

  export type tradePostCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    title: string
    content: string
    price: number
    salesType?: salesType
    hitCount?: number
    isHide?: boolean
    isPriceOffer?: boolean
    user: userCreateNestedOneWithoutTradePostsInput
    category: tradeCategoryCreateNestedOneWithoutTradePostInput
    tradeInterest?: tradeInterestCreateNestedManyWithoutTradePostInput
    lsmdAdmSectUmd: lsmdAdmSectUmdCreateNestedOneWithoutTradePostInput
  }

  export type tradePostUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    title: string
    content: string
    price: number
    salesType?: salesType
    hitCount?: number
    isHide?: boolean
    isPriceOffer?: boolean
    userId: number
    categoryId: number
    tradeInterest?: tradeInterestUncheckedCreateNestedManyWithoutTradePostInput
    lsmdAdmSectUmdId: string
  }

  export type tradePostUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    salesType?: EnumsalesTypeFieldUpdateOperationsInput | salesType
    hitCount?: IntFieldUpdateOperationsInput | number
    isHide?: BoolFieldUpdateOperationsInput | boolean
    isPriceOffer?: BoolFieldUpdateOperationsInput | boolean
    user?: userUpdateOneRequiredWithoutTradePostsInput
    category?: tradeCategoryUpdateOneRequiredWithoutTradePostInput
    tradeInterest?: tradeInterestUpdateManyWithoutTradePostInput
    lsmdAdmSectUmd?: lsmdAdmSectUmdUpdateOneRequiredWithoutTradePostInput
  }

  export type tradePostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    salesType?: EnumsalesTypeFieldUpdateOperationsInput | salesType
    hitCount?: IntFieldUpdateOperationsInput | number
    isHide?: BoolFieldUpdateOperationsInput | boolean
    isPriceOffer?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    tradeInterest?: tradeInterestUncheckedUpdateManyWithoutTradePostInput
    lsmdAdmSectUmdId?: StringFieldUpdateOperationsInput | string
  }

  export type tradePostCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    title: string
    content: string
    price: number
    salesType?: salesType
    hitCount?: number
    isHide?: boolean
    isPriceOffer?: boolean
    userId: number
    categoryId: number
    lsmdAdmSectUmdId: string
  }

  export type tradePostUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    salesType?: EnumsalesTypeFieldUpdateOperationsInput | salesType
    hitCount?: IntFieldUpdateOperationsInput | number
    isHide?: BoolFieldUpdateOperationsInput | boolean
    isPriceOffer?: BoolFieldUpdateOperationsInput | boolean
  }

  export type tradePostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    salesType?: EnumsalesTypeFieldUpdateOperationsInput | salesType
    hitCount?: IntFieldUpdateOperationsInput | number
    isHide?: BoolFieldUpdateOperationsInput | boolean
    isPriceOffer?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    lsmdAdmSectUmdId?: StringFieldUpdateOperationsInput | string
  }

  export type tradeInterestCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    tradePost: tradePostCreateNestedOneWithoutTradeInterestInput
    user: userCreateNestedOneWithoutTradeInterestInput
  }

  export type tradeInterestUncheckedCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    tradePostId: number
    userId: number
  }

  export type tradeInterestUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tradePost?: tradePostUpdateOneRequiredWithoutTradeInterestInput
    user?: userUpdateOneRequiredWithoutTradeInterestInput
  }

  export type tradeInterestUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tradePostId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type tradeInterestCreateManyInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    tradePostId: number
    userId: number
  }

  export type tradeInterestUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tradeInterestUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tradePostId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type EnumroleFilter = {
    equals?: role
    in?: Enumerable<role>
    notIn?: Enumerable<role>
    not?: NestedEnumroleFilter | role
  }

  export type TradePostListRelationFilter = {
    every?: tradePostWhereInput
    some?: tradePostWhereInput
    none?: tradePostWhereInput
  }

  export type TradeInterestListRelationFilter = {
    every?: tradeInterestWhereInput
    some?: tradeInterestWhereInput
    none?: tradeInterestWhereInput
  }

  export type tradePostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tradeInterestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type EnumroleWithAggregatesFilter = {
    equals?: role
    in?: Enumerable<role>
    notIn?: Enumerable<role>
    not?: NestedEnumroleWithAggregatesFilter | role
    _count?: NestedIntFilter
    _min?: NestedEnumroleFilter
    _max?: NestedEnumroleFilter
  }

  export type lsmdAdmSectUmdCountOrderByAggregateInput = {
    id?: SortOrder
    emdCd?: SortOrder
    emdNm?: SortOrder
    ssgOid?: SortOrder
    colAdmSe?: SortOrder
    gid?: SortOrder
  }

  export type lsmdAdmSectUmdAvgOrderByAggregateInput = {
    id?: SortOrder
    ssgOid?: SortOrder
    gid?: SortOrder
  }

  export type lsmdAdmSectUmdMaxOrderByAggregateInput = {
    id?: SortOrder
    emdCd?: SortOrder
    emdNm?: SortOrder
    ssgOid?: SortOrder
    colAdmSe?: SortOrder
    gid?: SortOrder
  }

  export type lsmdAdmSectUmdMinOrderByAggregateInput = {
    id?: SortOrder
    emdCd?: SortOrder
    emdNm?: SortOrder
    ssgOid?: SortOrder
    colAdmSe?: SortOrder
    gid?: SortOrder
  }

  export type lsmdAdmSectUmdSumOrderByAggregateInput = {
    id?: SortOrder
    ssgOid?: SortOrder
    gid?: SortOrder
  }

  export type tradeCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    name?: SortOrder
    imageSrc?: SortOrder
  }

  export type tradeCategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type tradeCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    name?: SortOrder
    imageSrc?: SortOrder
  }

  export type tradeCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    name?: SortOrder
    imageSrc?: SortOrder
  }

  export type tradeCategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumsalesTypeFilter = {
    equals?: salesType
    in?: Enumerable<salesType>
    notIn?: Enumerable<salesType>
    not?: NestedEnumsalesTypeFilter | salesType
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type TradeCategoryRelationFilter = {
    is?: tradeCategoryWhereInput
    isNot?: tradeCategoryWhereInput
  }

  export type LsmdAdmSectUmdRelationFilter = {
    is?: lsmdAdmSectUmdWhereInput
    isNot?: lsmdAdmSectUmdWhereInput
  }

  export type tradePostCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    title?: SortOrder
    content?: SortOrder
    price?: SortOrder
    salesType?: SortOrder
    hitCount?: SortOrder
    isHide?: SortOrder
    isPriceOffer?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    lsmdAdmSectUmdId?: SortOrder
  }

  export type tradePostAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    hitCount?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
  }

  export type tradePostMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    title?: SortOrder
    content?: SortOrder
    price?: SortOrder
    salesType?: SortOrder
    hitCount?: SortOrder
    isHide?: SortOrder
    isPriceOffer?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    lsmdAdmSectUmdId?: SortOrder
  }

  export type tradePostMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    title?: SortOrder
    content?: SortOrder
    price?: SortOrder
    salesType?: SortOrder
    hitCount?: SortOrder
    isHide?: SortOrder
    isPriceOffer?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    lsmdAdmSectUmdId?: SortOrder
  }

  export type tradePostSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    hitCount?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
  }

  export type EnumsalesTypeWithAggregatesFilter = {
    equals?: salesType
    in?: Enumerable<salesType>
    notIn?: Enumerable<salesType>
    not?: NestedEnumsalesTypeWithAggregatesFilter | salesType
    _count?: NestedIntFilter
    _min?: NestedEnumsalesTypeFilter
    _max?: NestedEnumsalesTypeFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type TradePostRelationFilter = {
    is?: tradePostWhereInput
    isNot?: tradePostWhereInput
  }

  export type tradeInterestTradePostIdUserIdCompoundUniqueInput = {
    tradePostId: number
    userId: number
  }

  export type tradeInterestCountOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    tradePostId?: SortOrder
    userId?: SortOrder
  }

  export type tradeInterestAvgOrderByAggregateInput = {
    tradePostId?: SortOrder
    userId?: SortOrder
  }

  export type tradeInterestMaxOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    tradePostId?: SortOrder
    userId?: SortOrder
  }

  export type tradeInterestMinOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    tradePostId?: SortOrder
    userId?: SortOrder
  }

  export type tradeInterestSumOrderByAggregateInput = {
    tradePostId?: SortOrder
    userId?: SortOrder
  }

  export type tradePostCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<tradePostCreateWithoutUserInput>, Enumerable<tradePostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<tradePostCreateOrConnectWithoutUserInput>
    createMany?: tradePostCreateManyUserInputEnvelope
    connect?: Enumerable<tradePostWhereUniqueInput>
  }

  export type tradeInterestCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<tradeInterestCreateWithoutUserInput>, Enumerable<tradeInterestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<tradeInterestCreateOrConnectWithoutUserInput>
    createMany?: tradeInterestCreateManyUserInputEnvelope
    connect?: Enumerable<tradeInterestWhereUniqueInput>
  }

  export type tradePostUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<tradePostCreateWithoutUserInput>, Enumerable<tradePostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<tradePostCreateOrConnectWithoutUserInput>
    createMany?: tradePostCreateManyUserInputEnvelope
    connect?: Enumerable<tradePostWhereUniqueInput>
  }

  export type tradeInterestUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<tradeInterestCreateWithoutUserInput>, Enumerable<tradeInterestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<tradeInterestCreateOrConnectWithoutUserInput>
    createMany?: tradeInterestCreateManyUserInputEnvelope
    connect?: Enumerable<tradeInterestWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumroleFieldUpdateOperationsInput = {
    set?: role
  }

  export type tradePostUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<tradePostCreateWithoutUserInput>, Enumerable<tradePostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<tradePostCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<tradePostUpsertWithWhereUniqueWithoutUserInput>
    createMany?: tradePostCreateManyUserInputEnvelope
    set?: Enumerable<tradePostWhereUniqueInput>
    disconnect?: Enumerable<tradePostWhereUniqueInput>
    delete?: Enumerable<tradePostWhereUniqueInput>
    connect?: Enumerable<tradePostWhereUniqueInput>
    update?: Enumerable<tradePostUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<tradePostUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<tradePostScalarWhereInput>
  }

  export type tradeInterestUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<tradeInterestCreateWithoutUserInput>, Enumerable<tradeInterestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<tradeInterestCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<tradeInterestUpsertWithWhereUniqueWithoutUserInput>
    createMany?: tradeInterestCreateManyUserInputEnvelope
    set?: Enumerable<tradeInterestWhereUniqueInput>
    disconnect?: Enumerable<tradeInterestWhereUniqueInput>
    delete?: Enumerable<tradeInterestWhereUniqueInput>
    connect?: Enumerable<tradeInterestWhereUniqueInput>
    update?: Enumerable<tradeInterestUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<tradeInterestUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<tradeInterestScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type tradePostUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<tradePostCreateWithoutUserInput>, Enumerable<tradePostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<tradePostCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<tradePostUpsertWithWhereUniqueWithoutUserInput>
    createMany?: tradePostCreateManyUserInputEnvelope
    set?: Enumerable<tradePostWhereUniqueInput>
    disconnect?: Enumerable<tradePostWhereUniqueInput>
    delete?: Enumerable<tradePostWhereUniqueInput>
    connect?: Enumerable<tradePostWhereUniqueInput>
    update?: Enumerable<tradePostUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<tradePostUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<tradePostScalarWhereInput>
  }

  export type tradeInterestUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<tradeInterestCreateWithoutUserInput>, Enumerable<tradeInterestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<tradeInterestCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<tradeInterestUpsertWithWhereUniqueWithoutUserInput>
    createMany?: tradeInterestCreateManyUserInputEnvelope
    set?: Enumerable<tradeInterestWhereUniqueInput>
    disconnect?: Enumerable<tradeInterestWhereUniqueInput>
    delete?: Enumerable<tradeInterestWhereUniqueInput>
    connect?: Enumerable<tradeInterestWhereUniqueInput>
    update?: Enumerable<tradeInterestUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<tradeInterestUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<tradeInterestScalarWhereInput>
  }

  export type tradePostCreateNestedManyWithoutLsmdAdmSectUmdInput = {
    create?: XOR<Enumerable<tradePostCreateWithoutLsmdAdmSectUmdInput>, Enumerable<tradePostUncheckedCreateWithoutLsmdAdmSectUmdInput>>
    connectOrCreate?: Enumerable<tradePostCreateOrConnectWithoutLsmdAdmSectUmdInput>
    createMany?: tradePostCreateManyLsmdAdmSectUmdInputEnvelope
    connect?: Enumerable<tradePostWhereUniqueInput>
  }

  export type tradePostUncheckedCreateNestedManyWithoutLsmdAdmSectUmdInput = {
    create?: XOR<Enumerable<tradePostCreateWithoutLsmdAdmSectUmdInput>, Enumerable<tradePostUncheckedCreateWithoutLsmdAdmSectUmdInput>>
    connectOrCreate?: Enumerable<tradePostCreateOrConnectWithoutLsmdAdmSectUmdInput>
    createMany?: tradePostCreateManyLsmdAdmSectUmdInputEnvelope
    connect?: Enumerable<tradePostWhereUniqueInput>
  }

  export type tradePostUpdateManyWithoutLsmdAdmSectUmdInput = {
    create?: XOR<Enumerable<tradePostCreateWithoutLsmdAdmSectUmdInput>, Enumerable<tradePostUncheckedCreateWithoutLsmdAdmSectUmdInput>>
    connectOrCreate?: Enumerable<tradePostCreateOrConnectWithoutLsmdAdmSectUmdInput>
    upsert?: Enumerable<tradePostUpsertWithWhereUniqueWithoutLsmdAdmSectUmdInput>
    createMany?: tradePostCreateManyLsmdAdmSectUmdInputEnvelope
    set?: Enumerable<tradePostWhereUniqueInput>
    disconnect?: Enumerable<tradePostWhereUniqueInput>
    delete?: Enumerable<tradePostWhereUniqueInput>
    connect?: Enumerable<tradePostWhereUniqueInput>
    update?: Enumerable<tradePostUpdateWithWhereUniqueWithoutLsmdAdmSectUmdInput>
    updateMany?: Enumerable<tradePostUpdateManyWithWhereWithoutLsmdAdmSectUmdInput>
    deleteMany?: Enumerable<tradePostScalarWhereInput>
  }

  export type tradePostUncheckedUpdateManyWithoutLsmdAdmSectUmdInput = {
    create?: XOR<Enumerable<tradePostCreateWithoutLsmdAdmSectUmdInput>, Enumerable<tradePostUncheckedCreateWithoutLsmdAdmSectUmdInput>>
    connectOrCreate?: Enumerable<tradePostCreateOrConnectWithoutLsmdAdmSectUmdInput>
    upsert?: Enumerable<tradePostUpsertWithWhereUniqueWithoutLsmdAdmSectUmdInput>
    createMany?: tradePostCreateManyLsmdAdmSectUmdInputEnvelope
    set?: Enumerable<tradePostWhereUniqueInput>
    disconnect?: Enumerable<tradePostWhereUniqueInput>
    delete?: Enumerable<tradePostWhereUniqueInput>
    connect?: Enumerable<tradePostWhereUniqueInput>
    update?: Enumerable<tradePostUpdateWithWhereUniqueWithoutLsmdAdmSectUmdInput>
    updateMany?: Enumerable<tradePostUpdateManyWithWhereWithoutLsmdAdmSectUmdInput>
    deleteMany?: Enumerable<tradePostScalarWhereInput>
  }

  export type tradePostCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<tradePostCreateWithoutCategoryInput>, Enumerable<tradePostUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<tradePostCreateOrConnectWithoutCategoryInput>
    createMany?: tradePostCreateManyCategoryInputEnvelope
    connect?: Enumerable<tradePostWhereUniqueInput>
  }

  export type tradePostUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<tradePostCreateWithoutCategoryInput>, Enumerable<tradePostUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<tradePostCreateOrConnectWithoutCategoryInput>
    createMany?: tradePostCreateManyCategoryInputEnvelope
    connect?: Enumerable<tradePostWhereUniqueInput>
  }

  export type tradePostUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<tradePostCreateWithoutCategoryInput>, Enumerable<tradePostUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<tradePostCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<tradePostUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: tradePostCreateManyCategoryInputEnvelope
    set?: Enumerable<tradePostWhereUniqueInput>
    disconnect?: Enumerable<tradePostWhereUniqueInput>
    delete?: Enumerable<tradePostWhereUniqueInput>
    connect?: Enumerable<tradePostWhereUniqueInput>
    update?: Enumerable<tradePostUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<tradePostUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<tradePostScalarWhereInput>
  }

  export type tradePostUncheckedUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<tradePostCreateWithoutCategoryInput>, Enumerable<tradePostUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<tradePostCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<tradePostUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: tradePostCreateManyCategoryInputEnvelope
    set?: Enumerable<tradePostWhereUniqueInput>
    disconnect?: Enumerable<tradePostWhereUniqueInput>
    delete?: Enumerable<tradePostWhereUniqueInput>
    connect?: Enumerable<tradePostWhereUniqueInput>
    update?: Enumerable<tradePostUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<tradePostUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<tradePostScalarWhereInput>
  }

  export type userCreateNestedOneWithoutTradePostsInput = {
    create?: XOR<userCreateWithoutTradePostsInput, userUncheckedCreateWithoutTradePostsInput>
    connectOrCreate?: userCreateOrConnectWithoutTradePostsInput
    connect?: userWhereUniqueInput
  }

  export type tradeCategoryCreateNestedOneWithoutTradePostInput = {
    create?: XOR<tradeCategoryCreateWithoutTradePostInput, tradeCategoryUncheckedCreateWithoutTradePostInput>
    connectOrCreate?: tradeCategoryCreateOrConnectWithoutTradePostInput
    connect?: tradeCategoryWhereUniqueInput
  }

  export type tradeInterestCreateNestedManyWithoutTradePostInput = {
    create?: XOR<Enumerable<tradeInterestCreateWithoutTradePostInput>, Enumerable<tradeInterestUncheckedCreateWithoutTradePostInput>>
    connectOrCreate?: Enumerable<tradeInterestCreateOrConnectWithoutTradePostInput>
    createMany?: tradeInterestCreateManyTradePostInputEnvelope
    connect?: Enumerable<tradeInterestWhereUniqueInput>
  }

  export type lsmdAdmSectUmdCreateNestedOneWithoutTradePostInput = {
    create?: XOR<lsmdAdmSectUmdCreateWithoutTradePostInput, lsmdAdmSectUmdUncheckedCreateWithoutTradePostInput>
    connectOrCreate?: lsmdAdmSectUmdCreateOrConnectWithoutTradePostInput
    connect?: lsmdAdmSectUmdWhereUniqueInput
  }

  export type tradeInterestUncheckedCreateNestedManyWithoutTradePostInput = {
    create?: XOR<Enumerable<tradeInterestCreateWithoutTradePostInput>, Enumerable<tradeInterestUncheckedCreateWithoutTradePostInput>>
    connectOrCreate?: Enumerable<tradeInterestCreateOrConnectWithoutTradePostInput>
    createMany?: tradeInterestCreateManyTradePostInputEnvelope
    connect?: Enumerable<tradeInterestWhereUniqueInput>
  }

  export type EnumsalesTypeFieldUpdateOperationsInput = {
    set?: salesType
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type userUpdateOneRequiredWithoutTradePostsInput = {
    create?: XOR<userCreateWithoutTradePostsInput, userUncheckedCreateWithoutTradePostsInput>
    connectOrCreate?: userCreateOrConnectWithoutTradePostsInput
    upsert?: userUpsertWithoutTradePostsInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutTradePostsInput, userUncheckedUpdateWithoutTradePostsInput>
  }

  export type tradeCategoryUpdateOneRequiredWithoutTradePostInput = {
    create?: XOR<tradeCategoryCreateWithoutTradePostInput, tradeCategoryUncheckedCreateWithoutTradePostInput>
    connectOrCreate?: tradeCategoryCreateOrConnectWithoutTradePostInput
    upsert?: tradeCategoryUpsertWithoutTradePostInput
    connect?: tradeCategoryWhereUniqueInput
    update?: XOR<tradeCategoryUpdateWithoutTradePostInput, tradeCategoryUncheckedUpdateWithoutTradePostInput>
  }

  export type tradeInterestUpdateManyWithoutTradePostInput = {
    create?: XOR<Enumerable<tradeInterestCreateWithoutTradePostInput>, Enumerable<tradeInterestUncheckedCreateWithoutTradePostInput>>
    connectOrCreate?: Enumerable<tradeInterestCreateOrConnectWithoutTradePostInput>
    upsert?: Enumerable<tradeInterestUpsertWithWhereUniqueWithoutTradePostInput>
    createMany?: tradeInterestCreateManyTradePostInputEnvelope
    set?: Enumerable<tradeInterestWhereUniqueInput>
    disconnect?: Enumerable<tradeInterestWhereUniqueInput>
    delete?: Enumerable<tradeInterestWhereUniqueInput>
    connect?: Enumerable<tradeInterestWhereUniqueInput>
    update?: Enumerable<tradeInterestUpdateWithWhereUniqueWithoutTradePostInput>
    updateMany?: Enumerable<tradeInterestUpdateManyWithWhereWithoutTradePostInput>
    deleteMany?: Enumerable<tradeInterestScalarWhereInput>
  }

  export type lsmdAdmSectUmdUpdateOneRequiredWithoutTradePostInput = {
    create?: XOR<lsmdAdmSectUmdCreateWithoutTradePostInput, lsmdAdmSectUmdUncheckedCreateWithoutTradePostInput>
    connectOrCreate?: lsmdAdmSectUmdCreateOrConnectWithoutTradePostInput
    upsert?: lsmdAdmSectUmdUpsertWithoutTradePostInput
    connect?: lsmdAdmSectUmdWhereUniqueInput
    update?: XOR<lsmdAdmSectUmdUpdateWithoutTradePostInput, lsmdAdmSectUmdUncheckedUpdateWithoutTradePostInput>
  }

  export type tradeInterestUncheckedUpdateManyWithoutTradePostInput = {
    create?: XOR<Enumerable<tradeInterestCreateWithoutTradePostInput>, Enumerable<tradeInterestUncheckedCreateWithoutTradePostInput>>
    connectOrCreate?: Enumerable<tradeInterestCreateOrConnectWithoutTradePostInput>
    upsert?: Enumerable<tradeInterestUpsertWithWhereUniqueWithoutTradePostInput>
    createMany?: tradeInterestCreateManyTradePostInputEnvelope
    set?: Enumerable<tradeInterestWhereUniqueInput>
    disconnect?: Enumerable<tradeInterestWhereUniqueInput>
    delete?: Enumerable<tradeInterestWhereUniqueInput>
    connect?: Enumerable<tradeInterestWhereUniqueInput>
    update?: Enumerable<tradeInterestUpdateWithWhereUniqueWithoutTradePostInput>
    updateMany?: Enumerable<tradeInterestUpdateManyWithWhereWithoutTradePostInput>
    deleteMany?: Enumerable<tradeInterestScalarWhereInput>
  }

  export type tradePostCreateNestedOneWithoutTradeInterestInput = {
    create?: XOR<tradePostCreateWithoutTradeInterestInput, tradePostUncheckedCreateWithoutTradeInterestInput>
    connectOrCreate?: tradePostCreateOrConnectWithoutTradeInterestInput
    connect?: tradePostWhereUniqueInput
  }

  export type userCreateNestedOneWithoutTradeInterestInput = {
    create?: XOR<userCreateWithoutTradeInterestInput, userUncheckedCreateWithoutTradeInterestInput>
    connectOrCreate?: userCreateOrConnectWithoutTradeInterestInput
    connect?: userWhereUniqueInput
  }

  export type tradePostUpdateOneRequiredWithoutTradeInterestInput = {
    create?: XOR<tradePostCreateWithoutTradeInterestInput, tradePostUncheckedCreateWithoutTradeInterestInput>
    connectOrCreate?: tradePostCreateOrConnectWithoutTradeInterestInput
    upsert?: tradePostUpsertWithoutTradeInterestInput
    connect?: tradePostWhereUniqueInput
    update?: XOR<tradePostUpdateWithoutTradeInterestInput, tradePostUncheckedUpdateWithoutTradeInterestInput>
  }

  export type userUpdateOneRequiredWithoutTradeInterestInput = {
    create?: XOR<userCreateWithoutTradeInterestInput, userUncheckedCreateWithoutTradeInterestInput>
    connectOrCreate?: userCreateOrConnectWithoutTradeInterestInput
    upsert?: userUpsertWithoutTradeInterestInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutTradeInterestInput, userUncheckedUpdateWithoutTradeInterestInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedEnumroleFilter = {
    equals?: role
    in?: Enumerable<role>
    notIn?: Enumerable<role>
    not?: NestedEnumroleFilter | role
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedEnumroleWithAggregatesFilter = {
    equals?: role
    in?: Enumerable<role>
    notIn?: Enumerable<role>
    not?: NestedEnumroleWithAggregatesFilter | role
    _count?: NestedIntFilter
    _min?: NestedEnumroleFilter
    _max?: NestedEnumroleFilter
  }

  export type NestedEnumsalesTypeFilter = {
    equals?: salesType
    in?: Enumerable<salesType>
    notIn?: Enumerable<salesType>
    not?: NestedEnumsalesTypeFilter | salesType
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedEnumsalesTypeWithAggregatesFilter = {
    equals?: salesType
    in?: Enumerable<salesType>
    notIn?: Enumerable<salesType>
    not?: NestedEnumsalesTypeWithAggregatesFilter | salesType
    _count?: NestedIntFilter
    _min?: NestedEnumsalesTypeFilter
    _max?: NestedEnumsalesTypeFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type tradePostCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    title: string
    content: string
    price: number
    salesType?: salesType
    hitCount?: number
    isHide?: boolean
    isPriceOffer?: boolean
    category: tradeCategoryCreateNestedOneWithoutTradePostInput
    tradeInterest?: tradeInterestCreateNestedManyWithoutTradePostInput
    lsmdAdmSectUmd: lsmdAdmSectUmdCreateNestedOneWithoutTradePostInput
  }

  export type tradePostUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    title: string
    content: string
    price: number
    salesType?: salesType
    hitCount?: number
    isHide?: boolean
    isPriceOffer?: boolean
    categoryId: number
    tradeInterest?: tradeInterestUncheckedCreateNestedManyWithoutTradePostInput
    lsmdAdmSectUmdId: string
  }

  export type tradePostCreateOrConnectWithoutUserInput = {
    where: tradePostWhereUniqueInput
    create: XOR<tradePostCreateWithoutUserInput, tradePostUncheckedCreateWithoutUserInput>
  }

  export type tradePostCreateManyUserInputEnvelope = {
    data: Enumerable<tradePostCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type tradeInterestCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    tradePost: tradePostCreateNestedOneWithoutTradeInterestInput
  }

  export type tradeInterestUncheckedCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    tradePostId: number
  }

  export type tradeInterestCreateOrConnectWithoutUserInput = {
    where: tradeInterestWhereUniqueInput
    create: XOR<tradeInterestCreateWithoutUserInput, tradeInterestUncheckedCreateWithoutUserInput>
  }

  export type tradeInterestCreateManyUserInputEnvelope = {
    data: Enumerable<tradeInterestCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type tradePostUpsertWithWhereUniqueWithoutUserInput = {
    where: tradePostWhereUniqueInput
    update: XOR<tradePostUpdateWithoutUserInput, tradePostUncheckedUpdateWithoutUserInput>
    create: XOR<tradePostCreateWithoutUserInput, tradePostUncheckedCreateWithoutUserInput>
  }

  export type tradePostUpdateWithWhereUniqueWithoutUserInput = {
    where: tradePostWhereUniqueInput
    data: XOR<tradePostUpdateWithoutUserInput, tradePostUncheckedUpdateWithoutUserInput>
  }

  export type tradePostUpdateManyWithWhereWithoutUserInput = {
    where: tradePostScalarWhereInput
    data: XOR<tradePostUpdateManyMutationInput, tradePostUncheckedUpdateManyWithoutTradePostsInput>
  }

  export type tradePostScalarWhereInput = {
    AND?: Enumerable<tradePostScalarWhereInput>
    OR?: Enumerable<tradePostScalarWhereInput>
    NOT?: Enumerable<tradePostScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    deleted?: DateTimeNullableFilter | Date | string | null
    title?: StringFilter | string
    content?: StringFilter | string
    price?: IntFilter | number
    salesType?: EnumsalesTypeFilter | salesType
    hitCount?: IntFilter | number
    isHide?: BoolFilter | boolean
    isPriceOffer?: BoolFilter | boolean
    userId?: IntFilter | number
    categoryId?: IntFilter | number
    lsmdAdmSectUmdId?: StringFilter | string
  }

  export type tradeInterestUpsertWithWhereUniqueWithoutUserInput = {
    where: tradeInterestWhereUniqueInput
    update: XOR<tradeInterestUpdateWithoutUserInput, tradeInterestUncheckedUpdateWithoutUserInput>
    create: XOR<tradeInterestCreateWithoutUserInput, tradeInterestUncheckedCreateWithoutUserInput>
  }

  export type tradeInterestUpdateWithWhereUniqueWithoutUserInput = {
    where: tradeInterestWhereUniqueInput
    data: XOR<tradeInterestUpdateWithoutUserInput, tradeInterestUncheckedUpdateWithoutUserInput>
  }

  export type tradeInterestUpdateManyWithWhereWithoutUserInput = {
    where: tradeInterestScalarWhereInput
    data: XOR<tradeInterestUpdateManyMutationInput, tradeInterestUncheckedUpdateManyWithoutTradeInterestInput>
  }

  export type tradeInterestScalarWhereInput = {
    AND?: Enumerable<tradeInterestScalarWhereInput>
    OR?: Enumerable<tradeInterestScalarWhereInput>
    NOT?: Enumerable<tradeInterestScalarWhereInput>
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    deleted?: DateTimeNullableFilter | Date | string | null
    tradePostId?: IntFilter | number
    userId?: IntFilter | number
  }

  export type tradePostCreateWithoutLsmdAdmSectUmdInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    title: string
    content: string
    price: number
    salesType?: salesType
    hitCount?: number
    isHide?: boolean
    isPriceOffer?: boolean
    user: userCreateNestedOneWithoutTradePostsInput
    category: tradeCategoryCreateNestedOneWithoutTradePostInput
    tradeInterest?: tradeInterestCreateNestedManyWithoutTradePostInput
  }

  export type tradePostUncheckedCreateWithoutLsmdAdmSectUmdInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    title: string
    content: string
    price: number
    salesType?: salesType
    hitCount?: number
    isHide?: boolean
    isPriceOffer?: boolean
    userId: number
    categoryId: number
    tradeInterest?: tradeInterestUncheckedCreateNestedManyWithoutTradePostInput
  }

  export type tradePostCreateOrConnectWithoutLsmdAdmSectUmdInput = {
    where: tradePostWhereUniqueInput
    create: XOR<tradePostCreateWithoutLsmdAdmSectUmdInput, tradePostUncheckedCreateWithoutLsmdAdmSectUmdInput>
  }

  export type tradePostCreateManyLsmdAdmSectUmdInputEnvelope = {
    data: Enumerable<tradePostCreateManyLsmdAdmSectUmdInput>
    skipDuplicates?: boolean
  }

  export type tradePostUpsertWithWhereUniqueWithoutLsmdAdmSectUmdInput = {
    where: tradePostWhereUniqueInput
    update: XOR<tradePostUpdateWithoutLsmdAdmSectUmdInput, tradePostUncheckedUpdateWithoutLsmdAdmSectUmdInput>
    create: XOR<tradePostCreateWithoutLsmdAdmSectUmdInput, tradePostUncheckedCreateWithoutLsmdAdmSectUmdInput>
  }

  export type tradePostUpdateWithWhereUniqueWithoutLsmdAdmSectUmdInput = {
    where: tradePostWhereUniqueInput
    data: XOR<tradePostUpdateWithoutLsmdAdmSectUmdInput, tradePostUncheckedUpdateWithoutLsmdAdmSectUmdInput>
  }

  export type tradePostUpdateManyWithWhereWithoutLsmdAdmSectUmdInput = {
    where: tradePostScalarWhereInput
    data: XOR<tradePostUpdateManyMutationInput, tradePostUncheckedUpdateManyWithoutTradePostInput>
  }

  export type tradePostCreateWithoutCategoryInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    title: string
    content: string
    price: number
    salesType?: salesType
    hitCount?: number
    isHide?: boolean
    isPriceOffer?: boolean
    user: userCreateNestedOneWithoutTradePostsInput
    tradeInterest?: tradeInterestCreateNestedManyWithoutTradePostInput
    lsmdAdmSectUmd: lsmdAdmSectUmdCreateNestedOneWithoutTradePostInput
  }

  export type tradePostUncheckedCreateWithoutCategoryInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    title: string
    content: string
    price: number
    salesType?: salesType
    hitCount?: number
    isHide?: boolean
    isPriceOffer?: boolean
    userId: number
    tradeInterest?: tradeInterestUncheckedCreateNestedManyWithoutTradePostInput
    lsmdAdmSectUmdId: string
  }

  export type tradePostCreateOrConnectWithoutCategoryInput = {
    where: tradePostWhereUniqueInput
    create: XOR<tradePostCreateWithoutCategoryInput, tradePostUncheckedCreateWithoutCategoryInput>
  }

  export type tradePostCreateManyCategoryInputEnvelope = {
    data: Enumerable<tradePostCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type tradePostUpsertWithWhereUniqueWithoutCategoryInput = {
    where: tradePostWhereUniqueInput
    update: XOR<tradePostUpdateWithoutCategoryInput, tradePostUncheckedUpdateWithoutCategoryInput>
    create: XOR<tradePostCreateWithoutCategoryInput, tradePostUncheckedCreateWithoutCategoryInput>
  }

  export type tradePostUpdateWithWhereUniqueWithoutCategoryInput = {
    where: tradePostWhereUniqueInput
    data: XOR<tradePostUpdateWithoutCategoryInput, tradePostUncheckedUpdateWithoutCategoryInput>
  }

  export type tradePostUpdateManyWithWhereWithoutCategoryInput = {
    where: tradePostScalarWhereInput
    data: XOR<tradePostUpdateManyMutationInput, tradePostUncheckedUpdateManyWithoutTradePostInput>
  }

  export type userCreateWithoutTradePostsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    phone?: number | null
    email: string
    name: string
    password?: string
    role?: role
    tradeInterest?: tradeInterestCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutTradePostsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    phone?: number | null
    email: string
    name: string
    password?: string
    role?: role
    tradeInterest?: tradeInterestUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutTradePostsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutTradePostsInput, userUncheckedCreateWithoutTradePostsInput>
  }

  export type tradeCategoryCreateWithoutTradePostInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    name: string
    imageSrc: string
  }

  export type tradeCategoryUncheckedCreateWithoutTradePostInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    name: string
    imageSrc: string
  }

  export type tradeCategoryCreateOrConnectWithoutTradePostInput = {
    where: tradeCategoryWhereUniqueInput
    create: XOR<tradeCategoryCreateWithoutTradePostInput, tradeCategoryUncheckedCreateWithoutTradePostInput>
  }

  export type tradeInterestCreateWithoutTradePostInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    user: userCreateNestedOneWithoutTradeInterestInput
  }

  export type tradeInterestUncheckedCreateWithoutTradePostInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    userId: number
  }

  export type tradeInterestCreateOrConnectWithoutTradePostInput = {
    where: tradeInterestWhereUniqueInput
    create: XOR<tradeInterestCreateWithoutTradePostInput, tradeInterestUncheckedCreateWithoutTradePostInput>
  }

  export type tradeInterestCreateManyTradePostInputEnvelope = {
    data: Enumerable<tradeInterestCreateManyTradePostInput>
    skipDuplicates?: boolean
  }

  export type lsmdAdmSectUmdCreateWithoutTradePostInput = {
    emdCd: string
    emdNm: string
    ssgOid: number
    colAdmSe: string
    gid: number
  }

  export type lsmdAdmSectUmdUncheckedCreateWithoutTradePostInput = {
    id?: number
    emdCd: string
    emdNm: string
    ssgOid: number
    colAdmSe: string
    gid: number
  }

  export type lsmdAdmSectUmdCreateOrConnectWithoutTradePostInput = {
    where: lsmdAdmSectUmdWhereUniqueInput
    create: XOR<lsmdAdmSectUmdCreateWithoutTradePostInput, lsmdAdmSectUmdUncheckedCreateWithoutTradePostInput>
  }

  export type userUpsertWithoutTradePostsInput = {
    update: XOR<userUpdateWithoutTradePostsInput, userUncheckedUpdateWithoutTradePostsInput>
    create: XOR<userCreateWithoutTradePostsInput, userUncheckedCreateWithoutTradePostsInput>
  }

  export type userUpdateWithoutTradePostsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
    tradeInterest?: tradeInterestUpdateManyWithoutUserInput
  }

  export type userUncheckedUpdateWithoutTradePostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
    tradeInterest?: tradeInterestUncheckedUpdateManyWithoutUserInput
  }

  export type tradeCategoryUpsertWithoutTradePostInput = {
    update: XOR<tradeCategoryUpdateWithoutTradePostInput, tradeCategoryUncheckedUpdateWithoutTradePostInput>
    create: XOR<tradeCategoryCreateWithoutTradePostInput, tradeCategoryUncheckedCreateWithoutTradePostInput>
  }

  export type tradeCategoryUpdateWithoutTradePostInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    imageSrc?: StringFieldUpdateOperationsInput | string
  }

  export type tradeCategoryUncheckedUpdateWithoutTradePostInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    imageSrc?: StringFieldUpdateOperationsInput | string
  }

  export type tradeInterestUpsertWithWhereUniqueWithoutTradePostInput = {
    where: tradeInterestWhereUniqueInput
    update: XOR<tradeInterestUpdateWithoutTradePostInput, tradeInterestUncheckedUpdateWithoutTradePostInput>
    create: XOR<tradeInterestCreateWithoutTradePostInput, tradeInterestUncheckedCreateWithoutTradePostInput>
  }

  export type tradeInterestUpdateWithWhereUniqueWithoutTradePostInput = {
    where: tradeInterestWhereUniqueInput
    data: XOR<tradeInterestUpdateWithoutTradePostInput, tradeInterestUncheckedUpdateWithoutTradePostInput>
  }

  export type tradeInterestUpdateManyWithWhereWithoutTradePostInput = {
    where: tradeInterestScalarWhereInput
    data: XOR<tradeInterestUpdateManyMutationInput, tradeInterestUncheckedUpdateManyWithoutTradeInterestInput>
  }

  export type lsmdAdmSectUmdUpsertWithoutTradePostInput = {
    update: XOR<lsmdAdmSectUmdUpdateWithoutTradePostInput, lsmdAdmSectUmdUncheckedUpdateWithoutTradePostInput>
    create: XOR<lsmdAdmSectUmdCreateWithoutTradePostInput, lsmdAdmSectUmdUncheckedCreateWithoutTradePostInput>
  }

  export type lsmdAdmSectUmdUpdateWithoutTradePostInput = {
    emdCd?: StringFieldUpdateOperationsInput | string
    emdNm?: StringFieldUpdateOperationsInput | string
    ssgOid?: IntFieldUpdateOperationsInput | number
    colAdmSe?: StringFieldUpdateOperationsInput | string
    gid?: IntFieldUpdateOperationsInput | number
  }

  export type lsmdAdmSectUmdUncheckedUpdateWithoutTradePostInput = {
    id?: IntFieldUpdateOperationsInput | number
    emdCd?: StringFieldUpdateOperationsInput | string
    emdNm?: StringFieldUpdateOperationsInput | string
    ssgOid?: IntFieldUpdateOperationsInput | number
    colAdmSe?: StringFieldUpdateOperationsInput | string
    gid?: IntFieldUpdateOperationsInput | number
  }

  export type tradePostCreateWithoutTradeInterestInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    title: string
    content: string
    price: number
    salesType?: salesType
    hitCount?: number
    isHide?: boolean
    isPriceOffer?: boolean
    user: userCreateNestedOneWithoutTradePostsInput
    category: tradeCategoryCreateNestedOneWithoutTradePostInput
    lsmdAdmSectUmd: lsmdAdmSectUmdCreateNestedOneWithoutTradePostInput
  }

  export type tradePostUncheckedCreateWithoutTradeInterestInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    title: string
    content: string
    price: number
    salesType?: salesType
    hitCount?: number
    isHide?: boolean
    isPriceOffer?: boolean
    userId: number
    categoryId: number
    lsmdAdmSectUmdId: string
  }

  export type tradePostCreateOrConnectWithoutTradeInterestInput = {
    where: tradePostWhereUniqueInput
    create: XOR<tradePostCreateWithoutTradeInterestInput, tradePostUncheckedCreateWithoutTradeInterestInput>
  }

  export type userCreateWithoutTradeInterestInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    phone?: number | null
    email: string
    name: string
    password?: string
    role?: role
    tradePosts?: tradePostCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutTradeInterestInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    phone?: number | null
    email: string
    name: string
    password?: string
    role?: role
    tradePosts?: tradePostUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutTradeInterestInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutTradeInterestInput, userUncheckedCreateWithoutTradeInterestInput>
  }

  export type tradePostUpsertWithoutTradeInterestInput = {
    update: XOR<tradePostUpdateWithoutTradeInterestInput, tradePostUncheckedUpdateWithoutTradeInterestInput>
    create: XOR<tradePostCreateWithoutTradeInterestInput, tradePostUncheckedCreateWithoutTradeInterestInput>
  }

  export type tradePostUpdateWithoutTradeInterestInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    salesType?: EnumsalesTypeFieldUpdateOperationsInput | salesType
    hitCount?: IntFieldUpdateOperationsInput | number
    isHide?: BoolFieldUpdateOperationsInput | boolean
    isPriceOffer?: BoolFieldUpdateOperationsInput | boolean
    user?: userUpdateOneRequiredWithoutTradePostsInput
    category?: tradeCategoryUpdateOneRequiredWithoutTradePostInput
    lsmdAdmSectUmd?: lsmdAdmSectUmdUpdateOneRequiredWithoutTradePostInput
  }

  export type tradePostUncheckedUpdateWithoutTradeInterestInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    salesType?: EnumsalesTypeFieldUpdateOperationsInput | salesType
    hitCount?: IntFieldUpdateOperationsInput | number
    isHide?: BoolFieldUpdateOperationsInput | boolean
    isPriceOffer?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    lsmdAdmSectUmdId?: StringFieldUpdateOperationsInput | string
  }

  export type userUpsertWithoutTradeInterestInput = {
    update: XOR<userUpdateWithoutTradeInterestInput, userUncheckedUpdateWithoutTradeInterestInput>
    create: XOR<userCreateWithoutTradeInterestInput, userUncheckedCreateWithoutTradeInterestInput>
  }

  export type userUpdateWithoutTradeInterestInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
    tradePosts?: tradePostUpdateManyWithoutUserInput
  }

  export type userUncheckedUpdateWithoutTradeInterestInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | role
    tradePosts?: tradePostUncheckedUpdateManyWithoutUserInput
  }

  export type tradePostCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    title: string
    content: string
    price: number
    salesType?: salesType
    hitCount?: number
    isHide?: boolean
    isPriceOffer?: boolean
    categoryId: number
    lsmdAdmSectUmdId: string
  }

  export type tradeInterestCreateManyUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    tradePostId: number
  }

  export type tradePostUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    salesType?: EnumsalesTypeFieldUpdateOperationsInput | salesType
    hitCount?: IntFieldUpdateOperationsInput | number
    isHide?: BoolFieldUpdateOperationsInput | boolean
    isPriceOffer?: BoolFieldUpdateOperationsInput | boolean
    category?: tradeCategoryUpdateOneRequiredWithoutTradePostInput
    tradeInterest?: tradeInterestUpdateManyWithoutTradePostInput
    lsmdAdmSectUmd?: lsmdAdmSectUmdUpdateOneRequiredWithoutTradePostInput
  }

  export type tradePostUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    salesType?: EnumsalesTypeFieldUpdateOperationsInput | salesType
    hitCount?: IntFieldUpdateOperationsInput | number
    isHide?: BoolFieldUpdateOperationsInput | boolean
    isPriceOffer?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: IntFieldUpdateOperationsInput | number
    tradeInterest?: tradeInterestUncheckedUpdateManyWithoutTradePostInput
    lsmdAdmSectUmdId?: StringFieldUpdateOperationsInput | string
  }

  export type tradePostUncheckedUpdateManyWithoutTradePostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    salesType?: EnumsalesTypeFieldUpdateOperationsInput | salesType
    hitCount?: IntFieldUpdateOperationsInput | number
    isHide?: BoolFieldUpdateOperationsInput | boolean
    isPriceOffer?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: IntFieldUpdateOperationsInput | number
    lsmdAdmSectUmdId?: StringFieldUpdateOperationsInput | string
  }

  export type tradeInterestUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tradePost?: tradePostUpdateOneRequiredWithoutTradeInterestInput
  }

  export type tradeInterestUncheckedUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tradePostId?: IntFieldUpdateOperationsInput | number
  }

  export type tradeInterestUncheckedUpdateManyWithoutTradeInterestInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tradePostId?: IntFieldUpdateOperationsInput | number
  }

  export type tradePostCreateManyLsmdAdmSectUmdInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    title: string
    content: string
    price: number
    salesType?: salesType
    hitCount?: number
    isHide?: boolean
    isPriceOffer?: boolean
    userId: number
    categoryId: number
  }

  export type tradePostUpdateWithoutLsmdAdmSectUmdInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    salesType?: EnumsalesTypeFieldUpdateOperationsInput | salesType
    hitCount?: IntFieldUpdateOperationsInput | number
    isHide?: BoolFieldUpdateOperationsInput | boolean
    isPriceOffer?: BoolFieldUpdateOperationsInput | boolean
    user?: userUpdateOneRequiredWithoutTradePostsInput
    category?: tradeCategoryUpdateOneRequiredWithoutTradePostInput
    tradeInterest?: tradeInterestUpdateManyWithoutTradePostInput
  }

  export type tradePostUncheckedUpdateWithoutLsmdAdmSectUmdInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    salesType?: EnumsalesTypeFieldUpdateOperationsInput | salesType
    hitCount?: IntFieldUpdateOperationsInput | number
    isHide?: BoolFieldUpdateOperationsInput | boolean
    isPriceOffer?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    tradeInterest?: tradeInterestUncheckedUpdateManyWithoutTradePostInput
  }

  export type tradePostUncheckedUpdateManyWithoutTradePostInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    salesType?: EnumsalesTypeFieldUpdateOperationsInput | salesType
    hitCount?: IntFieldUpdateOperationsInput | number
    isHide?: BoolFieldUpdateOperationsInput | boolean
    isPriceOffer?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type tradePostCreateManyCategoryInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    title: string
    content: string
    price: number
    salesType?: salesType
    hitCount?: number
    isHide?: boolean
    isPriceOffer?: boolean
    userId: number
    lsmdAdmSectUmdId: string
  }

  export type tradePostUpdateWithoutCategoryInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    salesType?: EnumsalesTypeFieldUpdateOperationsInput | salesType
    hitCount?: IntFieldUpdateOperationsInput | number
    isHide?: BoolFieldUpdateOperationsInput | boolean
    isPriceOffer?: BoolFieldUpdateOperationsInput | boolean
    user?: userUpdateOneRequiredWithoutTradePostsInput
    tradeInterest?: tradeInterestUpdateManyWithoutTradePostInput
    lsmdAdmSectUmd?: lsmdAdmSectUmdUpdateOneRequiredWithoutTradePostInput
  }

  export type tradePostUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    salesType?: EnumsalesTypeFieldUpdateOperationsInput | salesType
    hitCount?: IntFieldUpdateOperationsInput | number
    isHide?: BoolFieldUpdateOperationsInput | boolean
    isPriceOffer?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    tradeInterest?: tradeInterestUncheckedUpdateManyWithoutTradePostInput
    lsmdAdmSectUmdId?: StringFieldUpdateOperationsInput | string
  }

  export type tradeInterestCreateManyTradePostInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: Date | string | null
    userId: number
  }

  export type tradeInterestUpdateWithoutTradePostInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: userUpdateOneRequiredWithoutTradeInterestInput
  }

  export type tradeInterestUncheckedUpdateWithoutTradePostInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}